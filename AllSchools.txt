CSCI 1410 Fundamentals of Computing                                                                	First course in computing for those who will take additional computer science courses. Covers the capabilities of a computer, the elements of the computer language C++, and basic techniques for solving problems using a computer. Coreq: CSCI 1411. Max hours: 3 Credits. Semester Hours: 3 to 3
CSCI 1411 Fundamentals of Computing Lab 1 	This laboratory is taken with CSCI 1410 and will provide students with additional help with problem solving and computer exercises to compliment the course material covered in CSCI 1410. Coreq: CSCI 1410. Max hours: 1 Credit. Semester Hours: 1 to 1
CSCI 2312 Object Oriented Programming                                                                 	Programming topics in the C++ language. The emphasis is on problem solving using object oriented and Generic Programming. Topics include advanced I/O, classes, inheritance, polymorphism and virtual functions, abstract base classes, exception handling, templates, and the Standard Template Library. Prereq: Grade of C- or higher in the following courses: CSCI 1410 and CSCI 1411. Max Hours: 3 Credits. Semester Hours: 3 to 3
CSCI 2421 Data Structures & Program Design                                                                	Topics include a first look at an algorithm, data structures, abstract data types, and basic techniques such as sorting, searching, and recursion. Programming exercises are assigned through the semester. Prereq: Grade of C- or higher in the following courses: CSCI 1410 and CSCI 1411. Coreq: CSCI 2312. Max Hours: 3 Credits. Semester Hours: 3 to 3
CSCI 2511 Discrete Structures                                                             	Covers the fundamentals of discrete mathematics, including: logic, sets, functions, asymptotics, mathematical reasoning, induction, combinatorics, discrete probability, relations and graphs. Emphasis on how discrete mathematics applies to computer science in general and algorithm analysis in particular. Prereq: MATH 1401 with a C- or higher (Calculus I). Max hours: 3 Credits. Semester Hours: 3 to 3
CSCI 3287 Database Systems                                                                	Introduces database design, database management systems, and the SQL standard database language. Includes data modeling techniques, conceptual database design, theory of object-relational and relational databases, relational algebra, relational calculus, normalization and database integrity. Prereq: Grade of C- or higher in the following courses: ENGL 1020, CSCI 2312 and CSCI 2421. Restriction: Restricted to Computer Science Majors and Minors. Max Hours: 3 Credits. Semester Hours: 3 to 3
CSCI 3412 Algorithms                                                                	Design and analysis of algorithms. Asymptotic analysis as a means of evaluating algorithm efficiency. The application of induction and other mathematical techniques for proving the correctness of an algorithm. Data structures for simplifying algorithm design, such as hash tables, heaps and search trees. Elementary graph algorithms. Assignments include written work and programming projects. Prereq: Grade of C- or higher in the following courses: CSCI 2312, 2421 and 2511. Restriction: Restricted to Computer Science Majors and Minors. Max Hours: 3 Credits. Semester Hours: 3 to 3
CSCI 3508 Introduction to Software Engineering                                                                	Introduces principles and practices of software engineering: software life-cycle models, requirements engineering, analysis and design tools, human factors risk management, program certification, project management and intellectual property rights. Prereq: Grade of C- or higher in CSCI 3412. Restriction: Restricted to Computer Science Majors and Minors. Max Hours: 3
CSCI 4034 Theoretical Foundations of Computer Science                                                                 	Introduces abstract models for computation, formal languages and machines. Topics include: automata theory, formal languages, grammars and Turing machines. Prereq: Grade of C- or higher in CSCI 3412. Restriction: Restricted to Computer Science Majors, Minors and CSSC Certificate. Max Hours: 3 Credits. Semester Hours: 3 to 3
	
Required Computer Science Systems Core Courses 21	
CSCI 1510 Logic Design                                                                	The design and analysis of combinational and sequential logic circuits. Topics include binary and hexadecimal number systems, Boolean algebra and Boolean function minimization, and algorithmic state machines. Lecture/lab includes experiments with computer-aided design tools. This course requires the level of mathematical maturity of students ready for Calculus I. Max hours: 3 Credits. Semester Hours: 3 to 3
CSCI 2525 Assembly Language & Computer Organization                                                                 	Topics include computer architecture, program execution at the hardware level, programming in assembly language, the assembly process, hardware support of some high-level language features, and a program’s interface to the operating system. Programming exercises are assigned in this course. These exercises involve the use of specific hardware in designated laboratories. Prereq: Grade of C- or higher in the following courses: CSCI 1410, CSCI 1411 and CSCI 1510. Max Hours: 3 Credits. Semester Hours: 3 to 3
CSCI 3415 Principles of Programming Languages                                                                 	Introduces programming language design concepts and implementation issues. Includes language concepts such as control structures and data types, formal language specification techniques, and syntactic and semantic implementation issues. Prereq: Grade of C- or higher in the following courses: CSCI 2312, 2421 and CSCI 2525. Restricted to Computer Science Majors and Minors. Max Hours: 3 Credits. Semester Hours: 3 to 3
CSCI 3453 Operating Systems Concepts                                                                	Covers the principles of computer operating systems and the essential components of an operating system. Topics include: I/O devices, file systems, CPU scheduling and memory management. Prereq: Grade of C- or higher in the following courses: CSCI 3412 and CSCI 2525. Restricted to Computer Science Majors, Minors and CSSC Certificate. Max Hours: 3 Credits. Semester Hours: 3 to 3
CSCI 3761 Introduction to Computer Networks                                                                 	Introduction and overview of computer networks. Topics include Internet protocols, network devices, network security, and performance issues. Prereq: Grade of C- or higher in CSCI 2312 and 2421. Restriction: Restricted to Computer Science Majors, Minors and CSSC Certificate. Max Hours: 3 Credits. Semester Hours: 3 to 3
CSCI 4551 Parallel & Distributed Systems                                                                	Examines a range of topics involving parallel and distributed systems to improve computational performance. Topics include parallel and distributed programming languages, architectures, networks, algorithms and applications. Prereq: Grade of C- or higher in Math 3195 (or both MATH 3191 and MATH 3200), CSCI 3415 & CSCI 3453. Restricted to Computer Science Majors and Minors. Cross-listed with CSCI 5551. Max Hours: 3 Credits. Semester Hours: 3 to 3
CSCI 4591 Computer Architecture                                                                 	Deals with how assembly language maps to hardware, and basic hardware techniques implemented in computers. Topics include logic design of arithmetic units, data control path processor logic, pipelining, memory systems, and input-output units. The emphasis is on logic structure rather than electronic circuitry. Students must know basic control logic design and be familiar with an assembly language before taking this course. Prereq: Grade of C- or higher in CSCI 2525. Restriction: Restricted to Computer Science Majors and Minors. Max Hours: 3
	
CS Breadth: Capstone Project (Take Two) 6	
CSCI 4738 Senior Design Project I                                                                 	This is an advanced practical course in which students design, implement, and document and test software systems for use in industry, non-profits, government and research institutions. The course offers practical experience by working closely with project sponsors. It also offers extensive experience in oral and written communication throughout the software life cycle. Prereq: Grade of C- or higher in CSCI 3287, CSCI 3415, CSCI 3453, and CSCI 3508. Restriction: Restricted to Computer Science Majors and Minors. Max Hours: 3 Credits. Semester Hours: 3 to 3
CSCI 4739 Senior Design Project II                                                                	This course is a continuation of Senior Design I. Students must have taken Senior Design I in order to enroll for Senior Design II. In this course, the projects begun in Senior Design I are completed and presented. Prereq: CSCI 4738. Restricted to undergraduate Computer Science Majors and Minors. Max hours: 3 Credits. Semester Hours: 3 to 3
	
CS Breadth: Data Science (Take One) 3	
CSCI 4455 Data Mining                                                                 	Introduces concepts, techniques and methodologies to discover patterns in data. Topics include (but are not limited to) data preprocessing and cleansing, data warehousing, pattern mining, classification, prediction, cluster analysis, outlier detection, and online data analytics. Prereq: Grade of C- or higher in the following coures: MATH 3195 (or both MATH 3191 and MATH 3200), CSCI 3287 and CSCI 3412. Restricted to Computer Science Majors and Minors. Cross-listed with CSCI 5455. Max Hours: 3 Credits. Semester Hours: 3 to 3
CSCI 4580 Data Science                                                               	Introduces concepts and techniques that enable data cycle from data extraction to knowledge discovery, including but not limited to data exploration, hypotheses testing, data organization, data featurization, supervised and unsupervised data modeling and learning, scaling-up analytics, and data visualization. Prereq: Grade of C- or higher in MATH 3195 (or both MATH 3191 and MATH 3200), CSCI 3287 and CSCI 3412. Restricted to Computer Science Majors & Minors. Cross-listed with CSCI 5580. Max Hours: 3 Credits. Semester Hours: 3 to 3
CSCI 4930 Machine Learning 3	Provides theoretical and computational foundations in machine learning to design and develop intelligent applications to perform object recognition, personalized recommendations, improve cybersecurity, fact-checking, forecasting and finding communities based on three classes of algorithms: supervised, unsupervised, semi-supervised and reinforcement learning. Prereq: Grade of C- or higher in the following courses: MATH 3195 (or both MATH 3191 and MATH 3200) & CSCI 3412. Restricted to Computer Science Majors and Minors. Cross-listed with CSCI 5930. Max Hours: 3 Credits. Semester Hours: 3 to 3
CSCI 4931 Deep Learning                                                               	Provides a foundation on deep learning; a sought-after skill in machine learning. Topics include neural network design & learning, restricted Boltzmann machine, convolution neural network, recurrent neural network, LSTMs, deep reinforcement learning, autoencoders, and evolving computation frameworks like TensorFlow, Keras. Prereq: Grade of C- or higher in MATH 3195 (or both MATH 3191 and MATH 3200) and CSCI 3412. Restricted to Computer Science Majors and Minors. Cross-listed with CSCI 5931. Max Hours: 3 Credits. Semester Hours: 3 to 3
CSCI 4951 Big Data Systems                                                                	Presents a practical while in-depth review of the principles of a series of modern data processing systems (e.g., Hadoop, Spark, TensorFlow) designed to address the Big Data challenges. In combination, these systems enable the data to knowledge (Big) data lifecycle. Prereq: Grade of C- or higher in MATH 3195 (or MATH 3191 and MATH 3200), CSCI 3287 and CSCI 3412. Restriction: Restricted to Computer Science Majors and Minors. Cross-listed with CSCI 5951. Max Hours: 3 Credits. Semester Hours: 3 to 3
	
CS Breadth: Scientific Computing (Take One) 3	
CSCI 3560 Probability & Computing                                                                	Events and probability. Discrete random variables. Moments of random variables. Conditional probability and expectation. The probabilistic method. Markov chains and random walks. Continuous distributions and the Poisson process. Entropy, randomness and information. Randomized algorithms. Prereq: Grade of a C- or higher in CSCI 2511 and MATH 2411. Restriction: Restricted to Computer Science Majors and Minors. Max Hours: 3 Credits. Semester Hours: 3 to 3
CSCI 4650 Numerical Analysis I                                                               	Methods and analysis of techniques used to resolve continuous mathematical problems on the computer. Solution of linear and nonlinear equations, interpolation and integration. Cross-listed with CSCI 5660, MATH 4650, and MATH 5660. Prereq: MATH 2411, MATH 3191 or MATH 3195, and programming experience. Restriction: Restricted to Computer Science Majors and Minors. Max Hours: 3 Credits. Semester Hours: 3 to 3
CSCI 4110 Applied Number Theory                                                                	Every year, Topics include divisibility, prime numbers, congruences, number theoretic functions, quadratic reciprocity, special diophantine equations, cryptography, computer security, and engineering applications. Cross-listed with CSCI 5110. Prereq: Grade of C- or higher in one of the following courses: MATH 3000 or CSCI 2511. Restriction: Restricted to Computer Science Majors and Minors. Max Hours: 3 Credits. Semester Hours: 3 to 3
	
CS Breadth: Secure Computing (Take One) 3	
CSCI 4741 Principles of Cyber Security                                                              	Focuses on the most common threats to cybersecurity as well as ways to prevent security breaches or information loss. Topics will include: understanding and thwarting hacker methods, authentication, cryptography, programming security, malware analysis, web, database and file server security, network and enterprise security methods. Prereq: Grade of C- or higher in CSCI 3412 and CSCI 3287. Restriction: Restricted to Computer Science Majors, Minors and CSSC Certificate. Max Hours: 3 Credits. Semester Hours: 3 to 3
CSCI 4742 Cybersecurity Programming & Analysis                                                               	Focuses on cybersecurity related programming and analysis skills. Topics include: network and security application development, intrusion detection, automating security hardening. Students will design and develop security applications in multiple programming languages. Undergraduate algorithms and programming knowledge expected. Pre-Req: CSCI 3415. Restricted to undergraduate Computer Science Majors and Minors. Cross-listed with CSCI 5742. Max hours: 3 Credits. Semester Hours: 3 to 3
CSCI 4743 Cyber and Infrastructure Defense                                                               	Presents analytical study of state-of-the-art attack and defense paradigms in cyber systems and infrastructures. Analysis will focus on: theoretical foundations of cybersecurity, practical development of novel technical defense techniques and analysis of alternatives. Knowledge of undergraduate-level networking. Cross-listed with CSCI 5743. Prereq: Grade of C- or higher in CSCI 3761. Restriction: Restricted to Computer Science Majors, Minors and CSSC Certificate. Max Hours: 3 Credits. Semester Hours: 3 to 3
	
CS Breadth: System Software (Take Two) 6	
CSCI 3511 Hardware/Software Interface                                                                	Hardware and software techniques needed to control and program device interfaces. Input and output devices, computer peripherals, device drivers and interfaces are introduced. Specific programmable devices are used in class projects. Prereq: Grade of C- or higher in CSCI 2525. Restriction: Restricted to Computer Science Majors and Minors. Max Hours: 3 Credits. Semester Hours: 3 to 3
CSCI 4287 Embedded Systems Programming                                                        	Embedded Systems Programming happens across a spectrum of Domains. Embedded Systems Programming in the Small is characterized by the creation of small applications in high volumes. Embedded Systems Programming in the Large is characterized by the creation of medium to large applications in one-off or low volumes using specialized Operating Systems such as Real-time Operating Systems. Students will current languages, and are expected to have basic Operating Systems understanding. Prereq: Graded with C- or higher in CSCI 3453. Restriction: Restricted to Computer Science Majors and Minors. Max Hours: 3 Credits. Semester Hours: 3 to 3
CSCI 4565 Introduction to Computer Graphics                                                              	Introduces two and three dimensional computer graphics. Topics include scan conversion, geometric primitives, transformation, viewing, basic rendering, and illumination. Emphasis is on programming using “C” and “C++” Open GL. Pre-req: Grade of C- or higher in CSCI 3412 and (MATH 3191 or MATH 3195). Restricted to Computer Science Majors and Minors. Cross-listed with CSCI 5565. Max Hours: 3 Credits. Semester Hours: 3 to 3
	
Required Mathematics 12	
MATH 1401-4 Calculus I 4 	First course of a three-semester sequence (MATH 1401, 2411, 2421) in calculus. Topics covered include limits, derivatives, applications of derivatives, and the definite integral. Note: No co-credit with MATH 1080. Prereq:MATH 1109 or MATH 1070 or MATH 1110 with a C- or higher and MATH 1120 with a C- or higher or MATH 1130 with a C- or higher or MATH 1401 with a C- or higher OR entry into the MA01 Student Group OR ALEKS PPL score 76-100. If you have any questions or concerns about this requisite, please notify MATH.Placement@ucdenver.edu. Max Hours: 4 Credits. Semester Hours: 4 to 4
MATH 2411-4 Calculus II 4	The second of a three-semester sequence (MATH 1401, 2411, 2421) in calculus. Topics covered include exponential, logarithmic, and trigonometric functions, techniques of integration, indeterminate forms, improper integrals and infinite series. Prereq: C- or better in MATH 1401. Note: Students with a grade of B- or better in MATH 1401 pass this course at a much higher rate. Term offered: fall, spring, summer. Max hours: 4 Credits. GT: Course is approved by the Colorado Dept of Higher Education for statewide guaranteed transfer, GT-MA1. Semester Hours: 4 to 4
MATH 3195-4 Linear Algebra and Differential Equations	Presents the essential ideas and methods of linear algebra and differential equations, emphasizing the connections between and the applications of both subjects. The course is designed for students in the sciences and engineering. Note: No co-credit with MATH 3200 and MATH 3191. Prerequisite: MATH 2411 with a C- or higher. Term offered: fall, spring, summer. Max hours: 4 Credits. Semester Hours: 4 to 4
EE 108	Digital System Design	Digital circuit, logic, and system design. Digital representation of information. CMOS logic circuits. Combinational logic design. Logic building blocks, idioms, and structured design. Sequential logic design and timing analysis. Clocks and synchronization. Finite state machines. Microcode control. Digital system design. Control and datapath partitioning. Lab. *In Autumn, enrollment preference is given to EE majors. Any EE majors who must enroll in Autumn are invited to contact the instructor. Formerly EE 108A.
EE 180	Digital Systems Architecture	The design of processor-based digital systems. Instruction sets, addressing modes, data types. Assembly language programming, low-level data structures, introduction to operating systems and compilers. Processor microarchitecture, microprogramming, pipelining. Memory systems and caches. Input/output, interrupts, buses and DMA. System design implementation alternatives, software/hardware tradeoffs. Labs involve the design of processor subsystems and processor-based embedded systems. Formerly EE 108B. Prerequisite: CS107 (required) and EE108 (recommended but not required).
Select two of the following:		
EE 101A	Circuits I	Introduction to circuit modeling and analysis. Topics include creating the models of typical components in electronic circuits and simplifying non-linear models for restricted ranges of operation (small signal model); and using network theory to solve linear and non-linear circuits under static and dynamic operations. Prerequisite: ENGR40 or ENGR40M is strongly recommended.
EE 101B	Circuits II	Continuation of EE101A. Introduction to circuit design for modern electronic systems. Modeling and analysis of analog gain stages, frequency response, feedback. Filtering and analog to digital conversion. Fundamentals of circuit simulation. Prerequisites: EE101A, EE102A. Recommended: CME102.
EE 102A	Signal Processing and Linear Systems I	Concepts and tools for continuous- and discrete-time signal and system analysis with applications in signal processing, communications, and control. Mathematical representation of signals and systems. Linearity and time invariance. System impulse and step responses. System frequency response. Frequency-domain representations: Fourier series and Fourier transforms. Filtering and signal distortion. Time/frequency sampling and interpolation. Continuous-discrete-time signal conversion and quantization. Discrete-time signal processing. Prerequisite: MATH 53 or CME 102.
EE 102B	Signal Processing and Linear Systems II	Continuation of EE 102A. Concepts and tools for continuous- and discrete-time signal and system analysis with applications in communications, signal processing and control. Analog and digital modulation and demodulation. Sampling, reconstruction, decimation and interpolation. Finite impulse response filter design. Discrete Fourier transforms, applications in convolution and spectral analysis. Laplace transforms, applications in circuits and feedback control. Z transforms, applications in infinite impulse response filter design. Prerequisite: EE 102A.
Satisfy the requirements of one of the following concentrations:		
1) Digital Systems Concentration		
CS 140	Operating Systems and Systems Programming 4	Operating systems design and implementation. Basic structure; synchronization and communication mechanisms; implementation of processes, process management, scheduling, and protection; memory organization and management, including virtual memory; I/O device management, secondary storage, and file systems. Prerequisite: CS110.
or CS 140E	Operating systems design and implementation	Students will implement a simple, clean operating system (virtual memory, processes, file system) in the C programming language, on a rasberry pi computer and use the result to run a variety of devices and implement a final project. All hardware is supplied by the instructor, and no previous experience with operating systems, raspberry pi, or embedded programming is required.
or CS 143	Compilers	Principles and practices for design and implementation of compilers and interpreters. Topics: lexical analysis; parsing theory; symbol tables; type systems; scope; semantic analysis; intermediate representations; runtime environments; code generation; and basic program analysis and optimization. Students construct a compiler for a simple object-oriented language during course programming projects. Prerequisites: 103 or 103B, and 107.
EE 109	Digital Systems Design Lab	The design of integrated digital systems encompassing both customized software and hardware. Software/hardware design tradeoffs. Algorithm design for pipelining and parallelism. System latency and throughput tradeoffs. FPGA optimization techniques. Integration with external systems and smart devices. Firmware configuration and embedded system considerations. Enrollment limited to 25; preference to graduating seniors. Prerequisites: 108B, and CS 106B or X.
EE 271	Introduction to VLSI Systems	Provides a quick introduction to MOS transistors and IC fabrication and then creates abstractions to allow you to create and reason about complex digital systems. It uses a switch resistor model of a transistor, uses it to model gates, and then shows how gates and physical layout can be synthesized from Verilog or SystemVerilog descriptions. Most of the class will be spent on providing techniques to create designs that can be validated, are low power, provide good performance, and can be completed in finite time. Prerequisites: 101A, 108A and 108B; familiarity with transistors, logic design, Verilog and digital system organization.
Plus two of the following (6-8 units):		
CS 140	Operating Systems and Systems Programming (if not counted above) 4	Operating systems design and implementation. Basic structure; synchronization and communication mechanisms; implementation of processes, process management, scheduling, and protection; memory organization and management, including virtual memory; I/O device management, secondary storage, and file systems. Prerequisite: CS110.
or CS 140E	Operating systems design and implementation	Students will implement a simple, clean operating system (virtual memory, processes, file system) in the C programming language, on a rasberry pi computer and use the result to run a variety of devices and implement a final project. All hardware is supplied by the instructor, and no previous experience with operating systems, raspberry pi, or embedded programming is required.
or CS 143	Compilers	Principles and practices for design and implementation of compilers and interpreters. Topics: lexical analysis; parsing theory; symbol tables; type systems; scope; semantic analysis; intermediate representations; runtime environments; code generation; and basic program analysis and optimization. Students construct a compiler for a simple object-oriented language during course programming projects. Prerequisites: 103 or 103B, and 107.
CS 144	Introduction to Computer Networking	Principles and practice. Structure and components of computer networks, with focus on the Internet. Packet switching, layering, and routing. Transport and TCP: reliable delivery over an unreliable network, flow control, congestion control. Network names, addresses and ethernet switching. Includes significant programming component in C/C++; students build portions of the internet TCP/IP software. Prerequisite: CS110.
CS 149	Parallel Computing	This course is an introduction to parallelism and parallel programming. Most new computer architectures are parallel; programming these machines requires knowledge of the basic issues of and techniques for writing parallel software. Topics: varieties of parallelism in current hardware (e.g., fast networks, multicore, accelerators such as GPUs, vector instruction sets), importance of locality, implicit vs. explicit parallelism, shared vs. non-shared memory, synchronization mechanisms (locking, atomicity, transactions, barriers), and parallel programming models (threads, data parallel/streaming, MapReduce, Apache Spark, SPMD, message passing, SIMT, transactions, and nested parallelism). Significant parallel programming assignments will be given as homework. The course is open to students who have completed the introductory CS course sequence through 110.
CS 190	Software Design Studio	This course teaches the art of software design: how to decompose large complex systems into classes that can be implemented and maintained easily. Topics include the causes of complexity, modular design, techniques for creating deep classes, minimizing the complexity associated with exceptions, in-code documentation, and name selection. The class involves significant system software implementation and uses an iterative approach consisting of implementation, review, and revision. The course is taught in a studio format with in-class discussions and code reviews in addition to lectures. Prerequisite: CS 140 or equivalent. Apply at: https://web.stanford.edu/class/cs190.
CS 217	Hardware Accelerators for Machine Learning	This course provides in-depth coverage of the architectural techniques used to design accelerators for training and inference in machine learning systems. This course will cover classical ML algorithms such as linear regression and support vector machines as well as DNN models such as convolutional neural nets, and recurrent neural nets. We will consider both training and inference for these models and discuss the impact of parameters such as batch size, precision, sparsity and compression on the accuracy of these models. We will cover the design of accelerators for ML model inference and training. Students will become familiar with hardware implementation techniques for using parallelism, locality, and low precision to implement the core computational kernels used in ML. To design energy-efficient accelerators, students will develop the intuition to make trade-offs between ML model parameters and hardware implementation techniques. Students will read recent research papers and complete a design project. Prerequisites: CS 149 or EE 180. CS 229 is ideal, but not required.
CS 244	Advanced Topics in Networking	Classic papers, new ideas, and research papers in networking. Architectural principles: why the Internet was designed this way? Congestion control. Wireless and mobility; software-defined networks (SDN) and network virtualization; content distribution networks; packet switching; data-center networks. Prerequisite: 144 or equivalent.
EE 273	Digital Systems Engineering	Electrical issues in the design of high-performance digital systems, including signaling, timing, synchronization, noise, and power distribution. High-speed signaling methods; noise in digital systems, its effect on signaling, and methods for noise reduction; timing conventions; timing noise (skew and jitter), its effect on systems, and methods for mitigating timing noise; synchronization issues and synchronizer design; clock and power distribution problems and techniques; impact of electrical issues on system architecture and design. Prerequisites: EE101A and EE108A. Recommended: EE114/214A.
EE 282	Computer Systems Architecture	Course focuses on how to build modern computing systems, namely notebooks, smartphones, and data centers, covering primarily their hardware architecture and certain system software aspects. For each system class, we cover the system architecture, processor technology, advanced memory hierarchy and I/O organization, power and energy management, and reliability. We will also cover topics such as interactions with system software, virtualization, solid state storage, and security. The programming assignments allow students to explore performance/energy tradeoffs when using heterogeneous hardware resources on smartphone devices. Prerequisite: EE108B. Recommended: CS 140.
2) Robotics and Mechatronics Concentration		
CS 205L	Continuous Mathematical Methods with an Emphasis on Machine Learning	A survey of numerical approaches to the continuous mathematics used throughout computer science with an emphasis on machine and deep learning. Although motivated from the standpoint of machine learning, the course will focus on the underlying mathematical methods including computational linear algebra and optimization, as well as special topics such as automatic differentiation via backward propagation, momentum methods from ordinary differential equations, CNNs, RNNs, etc. Written homework assignments focus on various concepts; additionally, students choose either a take-home final exam or a series of programming assignments geared towards neural network creation, training, and inference. (Replaces CS205A, and satisfies all similar requirements.) Prerequisites: Math 51; Math104 or MATH113 or equivalent or comfort with the associated material.
CS 223A	Introduction to Robotics	Robotics foundations in modeling, design, planning, and control. Class covers relevant results from geometry, kinematics, statics, dynamics, motion planning, and control, providing the basic methodologies and tools in robotics research and applications. Concepts and models are illustrated through physical robot platforms, interactive robot simulations, and video segments relevant to historical research developments or to emerging application areas in the field. Recommended: matrix algebra.
ME 210	Introduction to Mechatronics	Technologies involved in mechatronics (intelligent electro-mechanical systems), and techniques to apply this technology to mecatronic system design. Topics include: electronics (A/D, D/A converters, op-amps, filters, power devices); software program design, event-driven programming; hardware and DC stepper motors, solenoids, and robust sensing. Large, open-ended team project. Prerequisites: ENGR 40, CS 106, or equivalents.
ENGR 105	Feedback Control Design	Design of linear feedback control systems for command-following error, stability, and dynamic response specifications. Root-locus and frequency response design techniques. Examples from a variety of fields. Some use of computer aided design with MATLAB. Prerequisites: Dynamics systems (EE 102B or ME 161), and ordinary differential equations (CME 102 or Math 53). This course will include synchronous teaching sessions, but will be recorded to allow asynchronous participation.
Plus one of the following (3-4 units):		
CS 225A	Experimental Robotics	Hands-on laboratory course experience in robotic manipulation. Topics include robot kinematics, dynamics, control, compliance, sensor-based collision avoidance, and human-robot interfaces. Second half of class is devoted to final projects using various robotic platforms to build and demonstrate new robot task capabilities. Previous projects include the development of autonomous robot behaviors of drawing, painting, playing air hocket, yoyo, basketball, ping-pong or xylophone. Prerequisites: 223A or equivalent.
CS 231A	Computer Vision: From 3D Reconstruction to Recognition	(Formerly 223B) An introduction to the concepts and applications in computer vision. Topics include: cameras and projection models, low-level image processing methods such as filtering and edge detection; mid-level vision topics such as segmentation and clustering; shape reconstruction from stereo, as well as high-level vision tasks such as object recognition, scene recognition, face detection and human motion categorization. Prerequisites: linear algebra, basic probability and statistics.
ENGR 205	Introduction to Control Design Techniques	Review of root-locus and frequency response techniques for control system analysis and synthesis. State-space techniques for modeling, full-state feedback regulator design, pole placement, and observer design. Combined observer and regulator design. Lab experiments on computers connected to mechanical systems. Prerequisites: 105, MATH 103, 113. Recommended: Matlab.
ENGR 207B	Linear Control Systems II	Probabilistic methods for control and estimation. Statistical inference for discrete and continuous random variables. Linear estimation with Gaussian noise. The Kalman filter. Prerequisite: EE 263.
3) Networking Concentration		
CS 140	Operating Systems and Systems Programming (CS 140E can substitute for CS 140) 4	Operating systems design and implementation. Basic structure; synchronization and communication mechanisms; implementation of processes, process management, scheduling, and protection; memory organization and management, including virtual memory; I/O device management, secondary storage, and file systems. Prerequisite: CS110.
CS 144	Introduction to Computer Networking	Principles and practice. Structure and components of computer networks, with focus on the Internet. Packet switching, layering, and routing. Transport and TCP: reliable delivery over an unreliable network, flow control, congestion control. Network names, addresses and ethernet switching. Includes significant programming component in C/C++; students build portions of the internet TCP/IP software. Prerequisite: CS110.
Plus three of the following (9-11 units):		
CS 240	Advanced Topics in Operating Systems	Recent research. Classic and new papers. Topics: virtual memory management, synchronization and communication, file systems, protection and security, operating system extension techniques, fault tolerance, and the history and experience of systems programming. Prerequisite: 140 or equivalent.
or CS 240LX	Advanced Systems Laboratory, Accelerated	This is an implementation-heavy, lab-based class that covers similar topics as CS240, but by writing code versus discussing papers. Our code will run "bare-metal" (without an operating system) on the widely-used ARM-based raspberry pi. Bare-metal lets us do interesting tricks without constantly fighting a lumbering, general-purpose OS that cannot get out of its own way. We will do ten projects, one per week, where each project covers two labs of (at a minimum) several hours each and a non-trivial amount of outside work. The workload is significant, but I will aim to not waste your time. Prerequisite: CS140E or instructor permission.
CS 241	Embedded Systems Workshop	Project-centric building hardware and software for embedded computing systems. Students work on an existing project of their own or join one of these projects. Syllabus topics will be determined by the needs of the enrolled students and projects. Examples of topics include: interrupts and concurrent programming, deterministic timing and synchronization, state-based programming models, filters, frequency response, and high-frequency signals, low power operation, system and PCB design, security, and networked communication. Prerequisite: CS107 (or equivalent).
CS 244	Advanced Topics in Networking	Classic papers, new ideas, and research papers in networking. Architectural principles: why the Internet was designed this way? Congestion control. Wireless and mobility; software-defined networks (SDN) and network virtualization; content distribution networks; packet switching; data-center networks. Prerequisite: 144 or equivalent.
CS 244B	Distributed Systems	Distributed operating systems and applications issues, emphasizing high-level protocols and distributed state sharing as the key technologies. Topics: distributed shared memory, object-oriented distributed system design, distributed directory services, atomic transactions and time synchronization, application-sufficient consistency, file access, process scheduling, process migration, and storage/communication abstractions on distribution, scale, robustness in the face of failure, and security. Prerequisites: CS 144.
EE 179	Analog and Digital Communication Systems	This course covers the fundamental principles underlying the analysis, design and optimization of analog and digital communication systems. Design examples will be taken from the most prevalent communication systems today: cell phones, Wifi, radio and TV broadcasting, satellites, and computer networks. Analysis techniques based on Fourier transforms and energy/power spectral density will be developed. Mathematical models for random variables and random (noise) signals will be presented, which are used to characterize filtering and modulation of random noise. These techniques will then be used to design analog (AM and FM) and digital (PSK and FSK) communication systems and determine their performance over channels with noise and interference. Prerequisite: 102A.

6.0001	Introduction to Computer Science Programming in Python	6	Introduction to computer science and programming for students with little or no programming experience. Students develop skills to program and use computational techniques to solve problems. Topics include the notion of computation, Python, simple algorithms and data structures, testing and debugging, and algorithmic complexity. Combination of 6.0001 and 6.0002 counts as REST subject. Final given in the seventh week of the term.
6.042[J]	Mathematics for Computer Science	12	Elementary discrete mathematics for science and engineering, with a focus on mathematical tools and proof techniques useful in computer science. Topics include logical notation, sets, relations, elementary graph theory, state machines and invariants, induction and proofs by contradiction, recurrences, asymptotic notation, elementary analysis of algorithms, elementary number theory and cryptography, permutations and combinations, counting tools, and discrete probability.
Select one of the following:			
6.UAT	Oral Communication (CI-M)		Provides instruction in aspects of effective technical oral presentations and exposure to communication skills useful in a workplace setting. Students create, give and revise a number of presentations of varying length targeting a range of different audiences. In person not required. Enrollment may be limited.
6.UAR	Seminar in Undergraduate Advanced Research (12 units, CI-M)		Instruction in effective undergraduate research, including choosing and developing a research topic, surveying previous work and publications, research topics in EECS, industry best practices, design for robustness, technical presentation, authorship and collaboration, and ethics. Students engage in extensive written and oral communication exercises, in the context of an approved advanced research project. A total of 12 units of credit is awarded for completion of the Fall and subsequent Spring term offerings. Application required; consult EECS SuperUROP website for more information.
Select one of the following:		12	
6.01	Introduction to EECS via Robotics		An integrated introduction to electrical engineering and computer science, taught using substantial laboratory experiments with mobile robots. Key issues in the design of engineered artifacts operating in the natural world: measuring and modeling system behaviors; assessing errors in sensors and effectors; specifying tasks; designing solutions based on analytical and computational models; planning, executing, and evaluating experimental tests of performance; refining models and designs. Issues addressed in the context of computer programs, control systems, probabilistic inference problems, circuits and transducers, which all play important roles in achieving robust operation of a large variety of engineered systems.
6.02	Introduction to EECS via Communication Networks		Studies key concepts, systems, and algorithms to reliably communicate data in settings ranging from the cellular phone network and the Internet to deep space. Weekly laboratory experiments explore these areas in depth. Topics presented in three modules - bits, signals, and packets - spanning the multiple layers of a communication system. Bits module includes information, entropy, data compression algorithms, and error correction with block and convolutional codes. Signals module includes modeling physical channels and noise, signal design, filtering and detection, modulation, and frequency-division multiplexing. Packets module includes switching and queuing principles, media access control, routing protocols, and data transport protocols.
6.03	Introduction to EECS via Medical Technology		Explores biomedical signals generated from electrocardiograms, glucose detectors or ultrasound images, and magnetic resonance images. Topics include physical characterization and modeling of systems in the time and frequency domains; analog and digital signals and noise; basic machine learning including decision trees, clustering, and classification; and introductory machine vision. Labs designed to strengthen background in signal processing and machine learning. Students design and run structured experiments, and develop and test procedures through further experimentation.
6.08	Introduction to EECS via Interconnected Embedded Systems		Introduction to embedded systems in the context of connected devices, wearables and the "Internet of Things" (IoT). Topics include microcontrollers, energy utilization, algorithmic efficiency, interfacing with sensors, networking, cryptography, and local versus distributed computation. Students design, make, and program an internet-connected wearable or handheld device. In final project, student teams design and demo their own cloud-connected IoT system. Enrollment limited; preference to first- and second-year students.
Computer Science Requirements			
6.004	Computation Structures	12	Provides an introduction to the design of digital systems and computer architecture. Emphasizes expressing all hardware designs in a high-level hardware language and synthesizing the designs. Topics include combinational and sequential circuits, instruction set abstraction for programmable hardware, single-cycle and pipelined processor implementations, multi-level memory hierarchies, virtual memory, exceptions and I/O, and parallel systems.
6.006	Introduction to Algorithms	12	Introduction to mathematical modeling of computational problems, as well as common algorithms, algorithmic paradigms, and data structures used to solve these problems. Emphasizes the relationship between algorithms and programming, and introduces basic performance measures and analysis techniques for these problems. Enrollment may be limited.
6.009	Fundamentals of Programming	12	Introduces fundamental concepts of programming. Designed to develop skills in applying basic methods from programming languages to abstract problems. Topics include programming and Python basics, computational concepts, software engineering, algorithmic techniques, data types, and recursion. Lab component consists of software design, construction, and implementation of design. Enrollment may be limited.
6.031	Elements of Software Construction	15	Introduces fundamental principles and techniques of software development: how to write software that is safe from bugs, easy to understand, and ready for change. Topics include specifications and invariants; testing, test-case generation, and coverage; abstract data types and representation independence; design patterns for object-oriented programming; concurrent programming, including message passing and shared memory concurrency, and defending against races and deadlock; and functional programming with immutable data and higher-order functions. Includes weekly programming exercises and larger group programming projects.
6.033	Computer Systems Engineering (CI-M)	12	Topics on the engineering of computer software and hardware systems: techniques for controlling complexity; strong modularity using client-server design, operating systems; performance, networks; naming; security and privacy; fault-tolerant systems, atomicity and coordination of concurrent activities, and recovery; impact of computer systems on society. Case studies of working systems and readings from the current literature provide comparisons and contrasts. Includes a single, semester-long design project. Students engage in extensive written communication exercises. Enrollment may be limited.
6.034	Artificial Intelligence	12	Introduces representations, methods, and architectures used to build applications and to account for human intelligence from a computational point of view. Covers applications of rule chaining, constraint propagation, constrained search, inheritance, statistical inference, and other problem-solving paradigms. Also addresses applications of identification trees, neural nets, genetic algorithms, support-vector machines, boosting, and other learning paradigms. Considers what separates human intelligence from that of other animals. Students taking graduate version complete additional assignments.
or 6.036	Introduction to Machine Learning		Introduces principles, algorithms, and applications of machine learning from the point of view of modeling and prediction; formulation of learning problems; representation, over-fitting, generalization; clustering, classification, probabilistic modeling; and methods such as support vector machines, hidden Markov models, and neural networks. Students taking graduate version complete additional assignments. Meets with 6.862 when offered concurrently. Recommended prerequisites: 6.006 and 18.06. Enrollment may be limited.
6.045[J]	Automata, Computability, and Complexity	12	Introduces principles, algorithms, and applications of machine learning from the point of view of modeling and prediction; formulation of learning problems; representation, over-fitting, generalization; clustering, classification, probabilistic modeling; and methods such as support vector machines, hidden Markov models, and neural networks. Students taking graduate version complete additional assignments. Meets with 6.862 when offered concurrently. Recommended prerequisites: 6.006 and 18.06. Enrollment may be limited.
or 6.046[J]	Design and Analysis of Algorithms		Techniques for the design and analysis of efficient algorithms, emphasizing methods useful in practice. Topics include sorting; search trees, heaps, and hashing; divide-and-conquer; dynamic programming; greedy algorithms; amortized analysis; graph algorithms; and shortest paths. Advanced topics may include network flow; computational geometry; number-theoretic algorithms; polynomial and matrix calculations; caching; and parallel computing.
15-075 Computer Science Co-Op	This course is meant for CS undergraduate students with a full-time internship that encompasses a summer and a contiguous semester, either Spring-Summer or Summer-Fall who wish to have this recorded on their academic transcript. Units posted for this course do not count toward any requirement for the CS undergraduate degree including free elective units. This course is not available to international students; consult with the Office for International Education for more information.
15-090 Computer Science Practicum	This course is for Computer Science students who wish to have an internship experience as part of their curriculum. Students are required to write a one-page summary statement prior to registration that explains how their internship connects with their CS curriculum, specifically on how it uses material they have learned as well as prepares them for future courses. Near the end of the internship, students will be required to submit a reflection paper that describes the work they did in more detail, including lessons learned about the work experience and how they utilized their CS education to work effectively. International students should consult with the Office of International Education for appropriate paperwork and additional requirements before registration. Units earned count toward the total required units necessary for degree completion; students should speak with an academic advisor for details. This course may be taken at most 3 times for a total of 9 units maximum. Students normally register for this course for use during the summer semester.
15-112 Fundamentals of Programming and Computer Science	A technical introduction to the fundamentals of programming with an emphasis on producing clear, robust, and reasonably efficient code using top-down design, informal analysis, and effective testing and debugging. Starting from first principles, we will cover a large subset of the Python programming language, including its standard libraries and programming paradigms. We will also target numerous deployment scenarios, including standalone programs, shell scripts, and web-based applications. This course assumes no prior programming experience. Even so, it is a fast-paced and rigorous preparation for 15-122. Students seeking a more gentle introduction to computer science should consider first taking 15-110. NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course.
15-122 Principles of Imperative Computation	For students with a basic understanding of programming (variables, expressions, loops, arrays, functions). Teaches imperative programming and methods for ensuring the correctness of programs. Students will learn the process and concepts needed to go from high-level descriptions of algorithms to correct imperative implementations, with specific application to basic data structures and algorithms. Much of the course will be conducted in a subset of C amenable to verification, with a transition to full C near the end. This course prepares students for 15-213 and 15-210. NOTE: students must achieve a C or better in order to use this course to satisfy the prerequisite for any subsequent Computer Science course. Prerequisite: 15-112. Corequisite: 21-127 or 15-151.
15-128 Freshman Immigration Course (Pittsburgh)	The Freshman Immigration Course is taken by first-semester Computer Science majors on the Pittsburgh campus. The course is designed to acquaint incoming majors with computer science at CMU. Talks range from historical perspectives in the field to descriptions of the cutting edge research being conducted in the School of Computer Science. Enrollment is limited to SCS Freshmen in Pittsburgh ONLY.
15-129 Freshman Immigration Course II (Doha, Qatar)	This course is ONLY offered at Carnegie Mellon in Qatar. Students and instructors will solve different problems each week by searching the Web and other likely places for answers. The problems will be submitted by other faculty who will grade the quality of the answers. Students will learn strategies and techniques for finding information on the Web more efficiently; learn when to start with a search engine, a subject-oriented directory, or other tools; explore and practice using advanced search syntax for major search engines; experience specialized search engines for images, sound, multimedia, newsgroups, and discussion lists as well as subject-specific search engines; discover valuable resources to help keep you up-to-date in this fast-changing environment.
15-131 Great Practical Ideas in Computer Science (Pittsburgh)	THIS COURSE IS OPEN TO CS FRESHMAN IN PITTSBURGH ONLY. Throughout your education as a Computer Scientist at Carnegie Mellon, you will take courses on programming, theoretical ideas, logic, systems, etc. As you progress, you will be expected to pick up the so-called "tools of the trade." This course is intended to help you learn what you need to know in a friendly, low-stress, high-support way. We will discuss UNIX, LaTeX, debugging and many other essential tools. Laptop required. (Laptops will be available for those without their own laptops.)
15-150 Principles of Functional Programming	An introduction to programming based on a "functional" model of computation. The functional model is a natural generalization of algebra in which programs are formulas that describe the output of a computation in terms of its inputs---that is, as a function. But instead of being confined to real- or complex-valued functions, the functional model extends the algebraic view to a very rich class of data types, including not only aggregates built up from other types, but also functions themselves as values. This course is an introduction to programming that is focused on the central concepts of function and type. One major theme is the interplay between inductive types, which are built up incrementally; recursive functions, which compute over inductive types by decomposition; and proof by structural induction, which is used to prove the correctness and time complexity of a recursive function. Another major theme is the role of types in structuring large programs into separate modules, and the integration of imperative programming through the introduction of data types whose values may be altered during computation. NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course. Prerequisites: (21-127 or 15-151) and (15-112).
15-151 Mathematical Foundations of Computer Science	This course is offered to incoming Computer Science freshmen and focuses on the fundamental concepts in Mathematics that are of particular interest to Computer Science such as logic, sets,induction, functions, and combinatorics. These topics are used as a context in which students learn to formalize arguments using the methods of mathematical proof. This course uses experimentation and collaboration as ways to gain better understanding of the material. Open to CS freshmen only (Fall 2012 and Fall 2013). NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course.
15-210 Parallel and Sequential Data Structures and Algorithms	Teaches students about how to design, analyze, and program algorithms and data structures. The course emphasizes parallel algorithms and analysis, and how sequential algorithms can be considered a special case. The course goes into more theoretical content on algorithm analysis than 15-122 and 15-150 while still including a significant programming component and covering a variety of practical applications such as problems in data analysis, graphics, text processing, and the computational sciences. NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course. Prerequisite: 15-122 and 15-150.
15-213 Introduction to Computer Systems	This course provides a programmer's view of how computer systems execute programs, store information, and communicate. It enables students to become more effective programmers, especially in dealing with issues of performance, portability and robustness. It also serves as a foundation for courses on compilers, networks, operating systems, and computer architecture, where a deeper understanding of systems-level issues is required. Topics covered include: machine-level code and its generation by optimizing compilers, performance evaluation and optimization, computer arithmetic, memory organization and management, networking technology and protocols, and supporting concurrent computation. NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course. Prerequisite: 15-122.
15-214 Principles of Software Construction: Objects, Design, and Concurrency	Software engineers today are less likely to design data structures and algorithms from scratch and more likely to build systems from library and framework components. In this course, students engage with concepts related to the construction of software systems at scale, building on their understanding of the basic building blocks of data structures, algorithms, program structures, and computer structures. The course covers technical topics in four areas: (1) concepts of design for complex systems, (2) object oriented programming, (3) static and dynamic analysis for programs, and (4) concurrent and distributed software. Student assignments involve engagement with complex software such as distributed massively multi-player game systems and frameworks for graphical user interaction. Prerequisites: (15-121 or 15-122) and (21-127 or 15-151).
15-221 Technical Communications for Computer Scientists (Doha, Qatar)	The course is designed for sophomore computer science majors to improve their abilities in practical, professional communications (both written and oral). It aims to help students compose clear, concise technical writings and oral presentations for multi-level audiences. Assignments include technical definitions, descriptions, instructions, process explanations, abstracts, memos, and research reports. Assignments may incorporate recent computer science research at Carnegie Mellon, projects in related technical courses, and professional case studies. Sophomores will likely find the course more useful if they have either had an internship or faculty-supervised research, including SURG projects prior to enrollment. Prerequisite: 76-101.
15-251 Great Theoretical Ideas in Computer Science	This course is about how to use theoretical ideas to formulate and solve problems in computer science. It integrates mathematical material with general problem solving techniques and computer science applications. Examples are drawn from algorithms, complexity theory, game theory, probability theory, graph theory, automata theory, algebra, cryptography, and combinatorics. Assignments involve both mathematical proofs and programming. NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course. Prerequisites: (15-112) and (21-127 or 15-151).
15-300 Research and Innovation in Computer Science	This Fall course is the first part of a two-course sequence that is designed to help prepare students to invent the future state-of-the-art in the field of computer science. Course topics will include the following: an overview of important things to know about how research and innovation works in the field of computer science; a survey of the current cutting- edge of computer science research, both here at Carnegie Mellon and elsewhere; critical thinking skills when reading research publications that disagree with each other; strategies for coping with open-ended problems; and technical communication skills for computer scientists. Students will also match up with a faculty mentor for a potential Technology Innovation Project (to be performed in the Spring), put together a detailed plan of attack for that project, and start to get up to speed (including background reading, etc.). This course can be used to satisfy the Technical Communications requirement for the CS major. Prerequisites: 15-210. 15-213. 15-251 and 76-101.
15-312 Foundations of Programming Languages	This course discusses in depth many of the concepts underlying the design, definition, implementation, and use of modern programming languages. Formal approaches to defining the syntax and semantics are used to describe the fundamental concepts underlying programming languages. A variety of programming paradigms are covered such as imperative, functional, logic, and concurrent programming. In addition to the formal studies, experience with programming in the languages is used to illustrate how different design goals can lead to radically different languages and models of computation. Prerequisites: 15-210 and 15-251.
15-313 Foundations of Software Engineering	Students gain exposure to the fundamentals of modern software engineering. This includes both core CS technical knowledge and the means by which this knowledge can be applied in the practical engineering of complex software. Topics related to software artifacts include design models, patterns, coding, static and dynamic analysis, testing and inspection, measurement, and software architecture and frameworks. Topics related to software process include modeling, requirements engineering, process models and evaluation, team development, and supply chain issues including outsourcing and open source. This course has a strong technical focus, and will include both written and programming assignments. Students will get experience with modern software engineering tools. Prerequisite: 15-214.
15-317 Constructive Logic	This multidisciplinary junior-level course is designed to provide a thorough introduction to modern constructive logic, its roots in philosophy, its numerous applications in computer science, and its mathematical properties. Some of the topics to be covered are intuitionistic logic, inductive definitions, functional programming, type theory, realizability, connections between classical and constructive logic, decidable classes. Prerequisite: 15-150.
15-322 Introduction to Computer Music	Computers are used to synthesize sound, process signals, and compose music. Personal computers have replaced studios full of sound recording and processing equipment, completing a revolution that began with recording and electronics. In this course, students will learn the fundamentals of digital audio, basic sound synthesis algorithms, and techniques for digital audio effects and processing. Students will apply their knowledge in programming assignments using a very high-level programming language for sound synthesis and composition. In a final project, students will demonstrate their mastery of tools and techniques through music composition or by the implementation of a significant sound-processing technique. Prerequisite: 15-112.
15-323 Computer Music Systems and Information Processing	This course presents concepts and techniques for representing and manipulating discrete music information, both in real time and off line. Representations of music as explicitly timed event sequences will be introduced, and students will learn how to build efficient run-time systems for event scheduling, tempo control, and interactive processing. The MIDI protocol is used to capture real-time performance information and to generate sound. The course will also cover non-real-time processing of music data, including Markov models, style recognition, computer accompaniment, query-by-humming, and algorithmic composition. This course is independent of, and complementary to 15-322, Introduction to Computer Music, which focuses on sound synthesis and signal processing. Prerequisite: 15-122.
15-354 Computational Discrete Mathematics	This course is about the computational aspects of some of the standard concepts of discrete mathematics (relations, functions, logic, graphs, algebra, automata), with emphasis on efficient algorithms. We begin with a brief introduction to computability and computational complexity. Other topics include: iteration, orbits and fixed points, order and equivalence relations, propositional logic and satisfiability testing, finite fields and shift register sequences, finite state machines, and cellular automata. Computational support for some of the material is available in the form of a Mathematica package. Prerequisite: 15-251 or 21-228.
15-355 Modern Computer Algebra	The goal of this course is to investigate the relationship between algebra and computation. The course is designed to expose students to algorithms used for symbolic computation, as well as to the concepts from modern algebra which are applied to the development of these algorithms. This course provides a hands-on introduction to many of the most important ideas used in symbolic mathematical computation, which involves solving system of polynomial equations (via Groebner bases), analytic integration, and solving linear difference equations. Throughout the course the computer algebra system Mathematica will be used for computation. Prerequisite: 15-251.
15-359 Probability and Computing	Probability theory has become indispensable in computer science. In areas such as artificial intelligence and computer science theory, probabilistic methods and ideas based on randomization are central. In other areas such as networks and systems, probability is becoming an increasingly useful framework for handling uncertainty and modeling the patterns of data that occur in complex systems. This course gives an introduction to probability as it is used in computer science theory and practice, drawing on applications and current research developments as motivation and context. Topics include combinatorial probability and random graphs, heavy tail distributions, concentration inequalities, various randomized algorithms, sampling random variables and computer simulation, and Markov chains and their many applications, from Web search engines to models of network protocols. The course will assume familiarity with 3-D calculus and linear algebra. Prerequisite: 15-251 and 21-241 and 21-259.
15-381 Artificial Intelligence: Representation and Problem Solving	This course is about the theory and practice of Artificial Intelligence. We will study modern techniques for computers to represent task-relevant information and make intelligent (i.e. satisficing or optimal) decisions towards the achievement of goals. The search and problem solving methods are applicable throughout a large range of industrial, civil, medical, financial, robotic, and information systems. We will investigate questions about AI systems such as: how to represent knowledge, how to effectively generate appropriate sequences of actions and how to search among alternatives to find optimal or near-optimal solutions. We will also explore how to deal with uncertainty in the world, how to learn from experience, and how to learn decision rules from data. We expect that by the end of the course students will have a thorough understanding of the algorithmic foundations of AI, how probability and AI are closely interrelated, and how automated agents learn. We also expect students to acquire a strong appreciation of the big-picture aspects of developing fully autonomous intelligent agents. Other lectures will introduce additional aspects of AI, including natural language processing, web-based search engines, industrial applications, autonomous robotics, and economic/game-theoretic decision making. Prerequisite: 15-122.
15-400 Research Practicum in Computer Science	This Spring course is the second part of a two-course sequence that is designed to help prepare students to invent the future state-of-the-art in the field of computer science. Building directly upon 15-300 (the prerequisite for this course), students will conduct a semester-long independent research project, under the guidance of both the course staff and a faculty project mentor. The course does not meet for lecture or recitations. Instead, the students will spend their time working on their research projects, and will also meet with course staff on a bi-weekly basis to discuss their progress. Students will prepare a written report and a poster presentation at the end of the semester to describe what they have accomplished. Prerequisite: 15-300.
15-410 Operating System Design and Implementation	Operating System Design and Implementation is a rigorous hands-on introduction to the principles and practice of operating systems. The core experience is writing a small Unix-inspired OS kernel, in C with some x86 assembly language, which runs on a PC hardware simulator (and on actual PC hardware if you wish). Work is done in two-person teams, and "team programming" skills (source control, modularity, documentation) are emphasized. The size and scope of the programming assignments typically result in students significantly developing their design, implementation, and debugging abilities. Core concepts include the process model, virtual memory, threads, synchronization, and deadlock; the course also surveys higher-level OS topics including file systems, interprocess communication, networking, and security. Students, especially graduate students, who have not satisfied the prerequisite at Carnegie Mellon are strongly cautioned - to enter the class you must be able to write a storage allocator in C, use a debugger, understand 2's-complement arithmetic, and translate between C and x86 assembly language. The instructor may require you to complete a skills assessment exercise before the first week of the semester in order to remain registered in the class. Auditing: this course is usually full, and we generally receive many more requests to audit than we can accept. If you wish to audit, please have your advisor contact us before the semester begins to discuss your educational goals. Prerequisite: 15-213.
15-411 Compiler Design	This course covers the design and implementation of compiler and run-time systems for high-level languages, and examines the interaction between language design, compiler design, and run-time organization. Topics covered include syntactic and lexical analysis, handling of user-defined types and type-checking, context analysis, code generation and optimization, and memory management and run-time organization. Prerequisite: 15-213.
15-414 Bug Catching: Automated Program Verification and Testing	Many CS and ECE students will be developing software and hardware that must be ultra reliable at some point in their careers. Logical errors in such designs can be costly, even life threatening. There have already been a number of well publicized errors like the Intel Pentium floating point error and the Arian 5 crash. In this course we will study tools for finding and preventing logical errors. Three types of tools will be studied: automated theorem proving, state exploration techniques like model checking and tools based on static program analysis. Although students will learn the theoretical basis for such tools, the emphasis will be on actually using them on real examples. Prerequisite: 15-122 and 15-251.
15-415 Database Applications	This course covers the fundamental topics for Database Management Systems: Database System Architectural Principles (ACID properties; data abstraction; external, conceptual, and internal schemata; data independence; data definition and data manipulation languages), Data models (entity-relationship and relational data models; data structures, integrity constraints, and operations for each data model; relational query languages: SQL, algebra, calculus), Theory of database design (functional dependencies; normal forms; dependency preservation; information loss), Query Optimization (equivalence of expressions, algebraic manipulation; optimization of selections and joins), Storage Strategies (indices, B-trees, hashing), Query Processing (execution of sort, join, and aggregation operators), and Transaction Processing (recovery and concurrency control). Prerequisite: 15-210 or 15-213.
15-418 Parallel Computer Architecture and Programming	The fundamental principles and engineering tradeoffs involved in designing modern parallel computers, as well as the programming techniques to effectively utilize these machines. Topics include naming shared data, synchronizing threads, and the latency and bandwidth associated with communication. Case studies on shared-memory, message-passing, data-parallel and dataflow machines will be used to illustrate these techniques and tradeoffs. Programming assignments will be performed on one or more commercial multiprocessors, and there will be a significant course project. Prerequisite: 15-213.
15-424 Foundations of Cyber-Physical Systems	Cyber-physical systems (CPSs) combine cyber effects (computation and/or communication) with physical effects (motion or other physical processes). Designing algorithms to control CPSs, such as those in cars, aircraft and robots, is challenging due to their tight coupling with physical behavior. At the same time, it is vital that these algorithms be correct, since we rely on CPSs for safety-critical tasks like keeping aircraft from colliding. Students in this course will understand the core principles behind CPSs, develop models and controls, identify safety specifications and critical properties of CPSs, understand abstraction and system architectures, learn how to design by invariant, reason rigorously about CPS models, verify CPS models of appropriate scale, understand the semantics of a CPS model and develop an intuition for operational effects. Students will write hybrid programs (HPs), which capture relevant dynamical aspects of CPSs in a simple programming language with a simple semantics, allowing the programmer to refer to real-valued variables representing real quantities and specify their dynamics as part of the HP. Prerequisites: (15-122) and (21-122) and (15-251 or 21-241 or 18-202)
15-440 Distributed Systems	The goals of this course are twofold: First, for students to gain an understanding of the principles and techniques behind the design of distributed systems, such as locking, concurrency, scheduling, and communication across the network. Second, for students to gain practical experience designing, implementing, and debugging real distributed systems. The major themes this course will teach include scarcity, scheduling, concurrency and concurrent programming, naming, abstraction and modularity, imperfect communication and other types of failure, protection from accidental and malicious harm, optimism, and the use of instrumentation and monitoring and debugging tools in problem solving. As the creation and management of software systems is a fundamental goal of any undergraduate systems course, students will design, implement, and debug large programming projects. As a consequence, competency in both the C and Java programming languages is required. Prerequisite: 15-213.
15-441 Computer Networks	The emphasis in this course will be on the basic performance and engineering trade-offs in the design and implementation of computer networks. To make the issues more concrete, the class includes several multi-week projects requiring significant design and implementation. The goal is for students to learn not only what computer networks are and how they work today, but also why they are designed the way they are and how they are likely to evolve in the future. We will draw examples primarily from the Internet. Topics to be covered include: network architecture, routing, congestion/flow/error control, naming and addressing, peer-to-peer and the web, internetworking, and network security. Prerequisite: 15-213.
15-451 Algorithm Design and Analysis	In this coruse, we study specific algorithms for a variety of problems, as well as general design and analysis techniques. Specific topics include searching, sorting, algorithms for graph problems, efficient data structures, lower bounds and NP-completeness. A variety of other topics may be covered at the discretion of the instructor. These include parallel algorithms, randomized algorithms, geometric algorithms, low level techniques for efficient programming, cryptography, and cryptographic protocols. Prerequisites: 15-210 and 15-251 and 21-241.
15-453 Formal Languages, Automata and Complexity	An introduction to the fundamental ideas and models underlying computing: finite automata, regular sets, pushdown automata, context-free grammars, Turing machines, undecidability, and complexity theory. Prerequisite: 15-251 or 21-228.
15-455 Undergraduate Complexity Theory	Complexity theory is the study of how much of a resource (such as time, space, parallelism, or randomness) is required to perform some of the computations that interest us the most. In a standard algorithms course, one concentrates on giving resource efficient methods to solve interesting problems. In this course, we concentrate on techniques that prove or suggest that there are no efficient methods to solve many important problems. We will develop the theory of various complexity classes, such as P, NP, co-NP, PH, #P, PSPACE, NC, AC, L, NL, UP, RP, BPP, IP, and PCP. We will study techniques to classify problems according to our available taxonomy. By developing a subtle pattern of reductions between classes we will suggest an (as yet unproven!) picture of how by using limited amounts of various resources, we limit our computational power. Prerequisite: 15-251.
15-456 Computational Geometry	How do you sort points in space? What does it even mean? This course takes the ideas of a traditional algorithms course, sorting, searching, selecting, graphs, and optimization, and extends them to problems on geometric inputs. We will cover many classical geometric constructions and novel algorithmic methods. Some of the topics to be covered are convex hulls, Delaunay triangulations, graph drawing, point location, geometric medians, polytopes, configuration spaces, linear programming, and others. This course is a natural extension to 15-451, for those who want to learn about algorithmic problems in higher dimensions. Prerequisite: 15-451.
15-462 Computer Graphics	This course provides a comprehensive introduction to computer graphics modeling, animation, and rendering. Topics covered include basic image processing, geometric transformations, geometric modeling of curves and surfaces, animation, 3-D viewing, visibility algorithms, shading, and ray tracing. Prerequisite: (21-259 and 15-213 and 21-240) or (21-259 and 15-213 and 21-241) or (18-202 and 18-213)
15-591 Independent Study in Computer Science	Specially selected projects and readings in computer science under supervision of a faculty member in SCS. Application required. Poster presentation is generally required to present completed work. More information is available on the Undergraduate Research page.
15-599 Undergraduate Thesis Research	Formal research leading to an original result in computer science under the supervision of an SCS faculty member. Requires a written thesis and final presentation at the Meeting of the Minds campus symposium. Thesis prospectus is required and must be approved before student can start research. More information is available on the Undergraduate Research page.
COMPUTATIONAL BIOLOGY	
	
02-510 Computational Genomics	Dramatic advances in experimental technology and computational analysis are fundamentally transforming the basic nature and goal of biological research. The emergence of new frontiers in biology, such as evolutionary genomics and systems biology is demanding new methodologies that can confront quantitative issues of substantial computational and mathematical sophistication. In this course we will discuss classical approaches and latest methodological advances in the context of the following biological problems: 1) Computational genomics, focusing on gene finding, motifs detection and sequence evolution.2) Analysis of high throughput biological data, such as gene expression data, focusing on issues ranging from data acquisition to pattern recognition and classification. 3) Molecular and regulatory evolution, focusing on phylogene tic inference and regulatory network evolution, and 4) Systems biology, concerning how to combine sequence, expression and other biological data sources to infer the structure and function of different systems in the cell. From the computational side this course focuses on modern machine learning methodologies for computational problems in molecular biology and genetics, including probabilistic modeling, inference and learning algorithms, pattern recognition, data integration, time series analysis, active learning, etc.
HUMAN COMPUTER INTERACTION	
	
05-391 Designing Human Centered Software	Why are things so hard to use these days? Why doesn�t this thing I just bought work? Why is this web site so hard to use? These are frustrations that we have all faced from systems not designed with people in mind. The question this course will focus on is: how can we design human-centered systems that people find useful and usable? This course is an introduction to designing, prototyping, and evaluating user interfaces. If you take only one course in Human-Computer Interaction, this is the course for you. This class is open to all undergrads and grad students, with either technical or non-technical backgrounds. We will cover theory as well as practical application of ideas from Human-Computer Interaction. Course work includes lectures, class discussion, homework, class presentations, and group project.
MACHINE LEARNING	
	
10-401 Introduction to Machine Learning	Machine learning is subfield of computer science with the goal of exploring, studying, and developing learning systems, methods, and algorithms that can improve their performance with learning from data. This course is designed to give undergraduate students a one-semester-long introduction to the main principles, algorithms, and applications of machine learning. Topics. The topics of this course will be in part parallel with those covered in the graduate machine learning courses (10-715, 10-701, 10-601), but with a greater emphasis on applications and case studies in machine learning. After completing the course, students will be able to: *select and apply an appropriate supervised learning algorithm for classification problems (e.g., naive Bayes, perceptron, support vector machine, logistic regression). *select and apply an appropriate supervised learning algorithm for regression problems (e.g., linear regression, ridge regression). *recognize different types of unsupervised learning problems, and select and apply appropriate algorithms (e.g., clustering, linear and nonlinear dimensionality reduction). *work with probabilities (Bayes rule, conditioning, expectations, independence), linear algebra (vector and matrix operations, eigenvectors, SVD), and calculus (gradients, Jacobians) to derive machine learning methods such as linear regression, naive Bayes, and principal components analysis. *understand machine learning principles such as model selection, overfitting, and underfitting, and techniques such as cross-validation and regularization. *implement machine learning algorithms such as logistic regression via stochastic gradient descent, linear regression (using a linear algebra toolbox), perceptron, or k-means clustering. *run appropriate supervised and unsupervised learning algorithms on real and synthetic data sets and interpret the results. Prerequisites: 15-122 and (15-151 or 21-127). Corequisite: 15-359 or 36-217 or 36-225 or 21-325.
	
LANGUAGE TECNOLOGIES	
	
11-411 Natural Language Processing	This course will introduce students to the highly interdisciplinary area of Artificial Intelligence known alternately as Natural Language Processing (NLP) and Computational Linguistics. The course aims to cover the techniques used today in software that does useful things with text in human languages like English and Chinese. Applications of NLP include automatic translation between languages, extraction and summarization of information in documents, question answering and dialog systems, and conversational agents. This course will focus on core representations and algorithms, with some time spent on real-world applications. Because modern NLP relies so heavily on Machine Learning, we'll cover the basics of discrete classification and probabilistic modeling as we go. Good computational linguists also know about Linguistics, so topics in linguistics (phonology, morphology, and syntax) will be covered when fitting. From a software engineering perspective, there will be an emphasis on rapid prototyping, a useful skill in many other areas of Computer Science. In particular, we will introduce some high-level languages (e.g., regular expressions and Dyna) and some scripting languages (e.g., Python and Perl) that can greatly simplify prototype implementation. Prerequisite: 15-122.
	
ROBOTICS	
16-384 Robot Kinematics and Dynamics	Foundations and principles of robotic kinematics. Topics include transformations, forward kinematics, inverse kinematics, differential kinematics (Jacobians), manipulability, and basic equations of motion. Course also include programming on robot arms. Prerequisite: 15-122 or 16-311 or 18-202 or 21-241 or 24-311.
16-385 Computer Vision	Basic concepts in machine vision, including sensing and perception, 2D image analysis, pattern classification, physics-based vision, stereo and motion, and object recognition. Prerequisites: (15-122 and 21-241 and 21-259) or (15-122 and 18-202).
	
MATHEMATICS	
	
21-120 Differential and Integral Calculus	Functions, limits, derivatives, logarithmic, exponential, and trigonometric functions, inverse functions; L'Hospital's Rule, curve sketching, Mean Value Theorem, related rates, linear and quadratic approximations, maximum-minimum problems, inverse functions, definite and indefinite integrals, and hyperbolic functions; applications of integration, integration by substitution and by parts.
21-122 Integration and Approximation	Integration by trigonometric substitution and partial fractions; arclength; improper integrals; Simpson's and Trapezoidal Rules for numerical integration; separable differential equations, Newton's method, Euler's method, Taylor's Theorem including a discussion of the remainder, sequences, series, power series. Parametric curves, polar coordinates, vectors, dot product. Prerequisite: 21-120.
21-127 Concepts of Mathematics	This course introduces the basic concepts, ideas and tools involved in doing mathematics. As such, its main focus is on presenting informal logic, and the methods of mathematical proof. These subjects are closely related to the application of mathematics in many areas, particularly computer science. Topics discussed include a basic introduction to elementary number theory, induction, the algebra of sets, relations, equivalence relations, congruences, partitions, and functions, including injections, surjections, and bijections.
21-241 Matrices and Linear Transformations	A first course in linear algebra intended for scientists, engineers, mathematicians and computer scientists. Students will be required to write some straightforward proofs. Topics to be covered: complex numbers, real and complex vectors and matrices, rowspace and columnspace of a matrix, rank and nullity, solving linear systems by row reduction of a matrix, inverse matrices and determinants, change of basis, linear transformations, inner product of vectors, orthonormal bases and the Gram-Schmidt process, eigenvectors and eigenvalues, diagonalization of a matrix, symmetric and orthogonal matrices. 21-127 is strongly recommended.
21-242 Matrix Theory	An honors version of 21-241 (Matrix Algebra and Linear Transformations) for students of greater aptitude and motivation. More emphasis will be placed on writing proofs. Topics to be covered: complex numbers, real and complex vectors and matrices, rowspace and columnspace of a matrix, rank and nullity, solving linear systems by row reduction of a matrix, inverse matrices and determinants, change of basis, linear transformations, inner product of vectors, orthonormal bases and the Gram-Schmidt process, eigenvectors and eigenvalues, diagonalization of a matrix, symmetric and orthogonal matrices, hermitian and unitary matrices, quadratic forms.
21-341 Linear Algebra	A mathematically rigorous treatment of Linear Algebra over an arbitrary field. Topics studied will include abstract vector spaces, linear transformations, determinants, eigenvalues, eigenvectors, inner products, invariant subspaces, canonical forms, the spectral theorem and the singular value decomposition. 21-373 recommended. Prerequisite: 21-241 or 21-242.
21-259 Calculus in Three Dimensions	Vectors, lines, planes, quadratic surfaces, polar, cylindrical and spherical coordinates, partial derivatives, directional derivatives, gradient, divergence, curl, chain rule, maximum-minimum problems, multiple integrals, parametric surfaces and curves, line integrals, surface integrals, Green-Gauss theorems. Prerequisite: 21-122.
21-300 Basic Logic	Propositional and predicate logic: Syntax, proof theory and semantics up to completeness theorem, Lowenheim Skolem theorems, and applications of the compactness theorem. Prerequisite: 15-251 or 21-228 or 21-373.
21-301 Combinatorics	A major part of the course concentrates on algebraic methods, which are relevant in the study of error correcting codes, and other areas. Topics covered in depth include permutations and combinations, generating functions, recurrence relations, the principle of inclusion and exclusion, and the Fibonacci sequence and the harmonic series. Additional topics may include existence proofs, partitions, finite calculus, generating combinatorial objects, Polya theory, codes, probabilistic methods. Prerequisites: 21-122 and (15-251 or 21-228).
21-325 Probability	This course focuses on the understanding of basic concepts in probability theory and illustrates how these concepts can be applied to develop and analyze a variety of models arising in computational biology, finance, engineering and computer science. The firm grounding in the fundamentals is aimed at providing students the flexibility to build and analyze models from diverse applications as well as preparing the interested student for advanced work in these areas. The course will cover core concepts such as probability spaces, random variables, random vectors, multivariate densities, distributions, expectations, sampling and simulation; independence, conditioning, conditional distributions and expectations; limit theorems such as the strong law of large numbers and the central limit theorem; as well as additional topics such as large deviations, random walks and Markov chains, as time permits. Prerequisites: 21-259 or 21-268 or 21-269.
21-484 Graph Theory	Graph theory uses basic concepts to approach a diversity of problems and nontrivial applications in operations research, computer science and other disciplines. It is one of the very few mathematical areas where one is always close to interesting unsolved problems. Topics include graphs and subgraphs, trees, connectivity, Euler tours and Hamilton cycles, matchings, graph colorings, planar graphs and Euler's Formula, directed graphs, network flows, counting arguments, and graph algorithms. Prerequisites: (15-251 or 21-228) and (21-241 or 21-242).
	
STATISTICS	
36-217 Probability Theory and Random Processes	This course provides an introduction to probability theory. It is designed for students in electrical and computer engineering. Topics include elementary probability theory, conditional probability and independence, random variables, distribution functions, joint and conditional distributions, limit theorems, and an introduction to random processes. Some elementary ideas in spectral analysis and information theory will be given. A grade of C or better is required in order to use this course as a pre-requisite for 36-226 and 36-410. Not open to students who have received credit for 36-225, or 36-625. Prerequisite: 21-112 or 21-122 or 21-123 or 21-256 or 21-259.
36-225 Introduction to Probability Theory	This course is the first half of a year long course which provides an introduction to probability and mathematical statistics for students in economics, mathematics and statistics. The use of probability theory is illustrated with examples drawn from engineering, the sciences, and management. Topics include elementary probability theory, conditional probability and independence, random variables, distribution functions, joint and conditional distributions, law of large numbers, and the central limit theorem. A grade of C or better is required in order to advance to 36-226 and 36-410. Not open to students who have received credit for 36-217 or 36-625.
	
PHILOSOPHY	
80-310 Formal Logic	Among the most significant developments in modern logic is the formal analysis of the notions of provability and logical consequence for the logic of relations and quantification, known as first-order logic. These notions are related by the soundness and completeness theorems: a logical formula is provable if and only if it is true under every interpretation. This course provides a formal specification of the syntax and semantics of first-order logic and then proves the soundness and completeness theorems. Other topics may include: basic model theory, intuitionistic, modal, and higher-order logics. Prerequisite: 15-251 or 80-210 or 80-211 or 80-212.
80-311 Undecidability and Incompleteness	This course focuses on two central problems of mathematical logic: the undecidability of predicate logic (established by Church and Turing) and the incompleteness of formal theories (discovered by Gödel for theories that contain a modicum of set or number theory). The mathematical solutions of these problems involve a rigorous concept of computability or calculability that turned out to be fundamental for computer science, but also cognitive science. We first discuss predicate logic and systematic ways of constructing proofs; that is followed by the formal development of elementary set theory. The concept of Turing machine computation is introduced and shown to be equivalent to the concept of recursive function. That provides the mathematical, methodologically adequate tools for establishing the results mentioned above. The mathematical and computational notions and results are among the most significant contributions of logic, not just to the solution of internal logical questions and to the foundations of computer science, but also to (the beginnings of) a deeper understanding of the human mind and mental processes. In addition to the mathematical developments, we will discuss historical and philosophical aspects of the subject. Prerequisite: 15-251 or 21-300 or 80-210 or 80-211 or 80-310.
MATH 1A	Calculus	This sequence is intended for majors in engineering and the physical sciences. An introduction to differential and integral calculus of functions of one variable, with applications and an introduction to transcendental functions.
MATH 1B	Calculus	Continuation of 1A. Techniques of integration; applications of integration. Infinite sequences and series. First-order ordinary differential equations. Second-order ordinary differential equations; oscillation and damping; series solutions of ordinary differential equations.
MATH 53	Multivariable Calculus	Parametric equations and polar coordinates. Vectors in 2- and 3-dimensional Euclidean spaces. Partial derivatives. Multiple integrals. Vector calculus. Theorems of Green, Gauss, and Stokes.
COMPSCI 70	Discrete Mathematics and Probability Theory	Logic, infinity, and induction; applications include undecidability and stable marriage problem. Modular arithmetic and GCDs; applications include primality testing and cryptography. Polynomials; examples include error correcting codes and interpolation. Probability including sample spaces, independence, random variables, law of large numbers; examples include load balancing, existence arguments, Bayesian inference.
EECS Lower Division Core		
Code	Title	
EECS 16A	Designing Information Devices and Systems I	This course and its follow-on course EECS16B focus on the fundamentals of designing modern information devices and systems that interface with the real world. Together, this course sequence provides a comprehensive foundation for core EECS topics in signal processing, learning, control, and circuit design while introducing key linear-algebraic concepts motivated by application contexts. Modeling is emphasized in a way that deepens mathematical maturity, and in both labs and homework, students will engage computationally, physically, and visually with the concepts being introduced in addition to traditional paper/pencil exercises. The courses are aimed at entering students as well as non-majors seeking a broad foundation for the field.
EECS 16B	Designing Information Devices and Systems II	This course is a follow-on to EECS 16A, and focuses on the fundamentals of designing and building modern information devices and systems that interface with the real world. The course sequence provides a comprehensive introduction to core EECS topics in machine learning, circuit design, control, and signal processing while developing key linear-algebraic concepts motivated by application contexts. Modeling is emphasized in a way that deepens mathematical maturity, and in both labs and homework, students will engage computationally, physically, and visually with the concepts being introduced in addition to traditional paper exercises. The courses are aimed at entering students as well as non-majors seeking a broad introduction to the field.
COMPSCI 61A	The Structure and Interpretation of Computer Programs	An introduction to programming and computer science focused on abstraction techniques as means to manage program complexity. Techniques include procedural abstraction; control abstraction using recursion, higher-order functions, generators, and streams; data abstraction using interfaces, objects, classes, and generic operators; and language abstraction using interpreters and macros. The course exposes students to programming paradigms, including functional, object-oriented, and declarative approaches. It includes an introduction to asymptotic analysis of algorithms. There are several significant programming projects.
COMPSCI 61B	Data Structures	Fundamental dynamic data structures, including linear lists, queues, trees, and other linked structures; arrays strings, and hash tables. Storage management. Elementary principles of software engineering. Abstract data types. Algorithms for sorting and searching. Introduction to the Java programming language.
or COMPSCI 61BL	Data Structures and Programming Methodology	The same material as in 61B, but in a laboratory-based format.
COMPSCI 61C	Great Ideas of Computer Architecture (Machine Structures)	The internal organization and operation of digital computers. Machine architecture, support for high-level languages (logic, arithmetic, instruction sequencing) and operating systems (I/O, interrupts, memory management, process switching). Elements of computer logic design. Tradeoffs involved in fundamental architectural design decisions.
or COMPSCI 61CL	Machine Structures (Lab-Centric)	The same material as in 61C but in a lab-centric format.
Upper Division EECS Electives		
Code	Title	
Select a minimum of 20 units of upper division EECS courses. 7		
At least one of the courses must be a design elective. Select from the following design courses:		
EL ENG C128	Feedback Control Systems [4]	Analysis and synthesis of linear feedback control systems in transform and time domains. Control system design by root locus, frequency response, and state space methods. Applications to electro-mechanical and mechatronics systems.
EL ENG 130	Integrated-Circuit Devices [4]	Overview of electronic properties of semiconductor. Metal-semiconductor contacts, pn junctions, bipolar transistors, and MOS field-effect transistors. Properties that are significant to device operation for integrated circuits. Silicon device fabrication technology.
EL ENG 140	Linear Integrated Circuits [4]	Single and multiple stage transistor amplifiers. Operational amplifiers. Feedback amplifiers, 2-port formulation, source, load, and feedback network loading. Frequency response of cascaded amplifiers, gain-bandwidth exchange, compensation, dominant pole techniques, root locus. Supply and temperature independent biasing and references. Selected applications of analog circuits such as analog-to-digital converters, switched capacitor filters, and comparators. Hardware laboratory and design project.
EL ENG 143	Microfabrication Technology [4]	Integrated circuit device fabrication and surface micromachining technology. Thermal oxidation, ion implantation, impurity diffusion, film deposition, expitaxy, lithography, etching, contacts and interconnections, and process integration issues. Device design and mask layout, relation between physical structure and electrical/mechanical performance. MOS transistors and poly-Si surface microstructures will be fabricated in the laboratory and evaluated.
EL ENG 192	Mechatronic Design Laboratory [4]	Design project course, focusing on application of theoretical principles in electrical engineering to control of a small-scale system, such as a mobile robot. Small teams of students will design and construct a mechatronic system incorporating sensors, actuators, and intelligence.
COMPSCI 160	User Interface Design and Development [4]	The design, implementation, and evaluation of user interfaces. User-centered design and task analysis. Conceptual models and interface metaphors. Usability inspection and evaluation methods. Analysis of user study data. Input methods (keyboard, pointing, touch, tangible) and input models. Visual design principles. Interface prototyping and implementation methodologies and tools. Students will develop a user interface for a specific task and target user group in teams.
COMPSCI 161	Computer Security [4] 6	Introduction to computer security. Cryptography, including encryption, authentication, hash functions, cryptographic protocols, and applications. Operating system security, access control. Network security, firewalls, viruses, and worms. Software security, defensive programming, and language-based security. Case studies from real-world systems.
COMPSCI 162	Operating Systems and System Programming [4]	Basic concepts of operating systems and system programming. Utility programs, subsystems, multiple-program systems. Processes, interprocess communication, and synchronization. Memory allocation, segmentation, paging. Loading and linking, libraries. Resource allocation, scheduling, performance evaluation. File systems, storage devices, I/O systems. Protection, security, and privacy.
COMPSCI 164	Programming Languages and Compilers [4]	Survey of programming languages. The design of modern programming languages. Principles and techniques of scanning, parsing, semantic analysis, and code generation. Implementation of compilers, interpreters, and assemblers. Overview of run-time organization and error handling.
COMPSCI 169	Software Engineering [2-4]	Ideas and techniques for designing, developing, and modifying large software systems. Function-oriented and object-oriented modular design techniques, designing for re-use and maintainability. Specification and documentation. Verification and validation. Cost and quality metrics and estimation. Project team organization and management. Students will work in teams on a substantial programming project.
or COMPSCI 169A	Introduction to Software Engineering	Ideas and techniques for designing, developing, and modifying large software systems. Service-oriented architecture, behavior-driven design with user stories, cloud computing, test-driven development, automated testing, cost and quality metrics for maintainability and effort estimation, practical performance and security in software operations, design patterns and refactoring, specification and documentation, agile project team organization and management.
or COMPSCI 169L	Software Engineering Team Project	Open-ended design project enhancing or creating software for real customers in an agile team setting. Teamwork coordination, effective customer meetings, pre- and post-iteration team meetings, running scrums and standups, technical communication. Contributing as a team to an open-source project; tools and workflows associated with open source collaboration, including fork-and-pull, rebase, upstream merge, continuous deployment & integration.
or COMPSCI W169A	Software Engineering	This course presents ideas and techniques for designing, developing, and modifying large software systems using Agile techniques and tools. Topics include: function-oriented and object-oriented modular design techniques, designing for re-use and maintainability including proper use of design patterns, behavior-driven design, test-driven development, user stories for requirements elicitation & documentation, verification and validation, cost and quality metrics and estimation, project team organization and management, analyzing and refactoring legacy code.
COMPSCI 182	Designing, Visualizing and Understanding Deep Neural Networks [4]	Deep Networks have revolutionized computer vision, language technology, robotics and control. They have growing impact in many other areas of science and engineering. They do not however, follow a closed or compact set of theoretical principles. In Yann Lecun's words they require "an interplay between intuitive insights, theoretical modeling, practical implementations, empirical studies, and scientific analyses." This course attempts to cover that ground.
or COMPSCI L182	Designing, Visualizing and Understanding Deep Neural Networks	Deep Networks have revolutionized computer vision, language technology, robotics and control. They have growing impact in many other areas of science and engineering. They do not however, follow a closed or compact set of theoretical principles. In Yann Lecun's words they require "an interplay between intuitive insights, theoretical modeling, practical implementations, empirical studies, and scientific analyses." This course attempts to cover that ground.
or COMPSCI W182	Designing, Visualizing and Understanding Deep Neural Networks	Deep Networks have revolutionized computer vision, language technology, robotics and control. They have growing impact in many other areas of science and engineering. They do not however, follow a closed or compact set of theoretical principles. In Yann Lecun's words they require "an interplay between intuitive insights, theoretical modeling, practical implementations, empirical studies, and scientific analyses." This course attempts to cover that ground.
COMPSCI 184	Foundations of Computer Graphics [4]	Techniques of modeling objects for the purpose of computer rendering: boundary representations, constructive solids geometry, hierarchical scene descriptions. Mathematical techniques for curve and surface representation. Basic elements of a computer graphics rendering pipeline; architecture of modern graphics display devices. Geometrical transformations such as rotation, scaling, translation, and their matrix representations. Homogeneous coordinates, projective and perspective transformations. Algorithms for clipping, hidden surface removal, rasterization, and anti-aliasing. Scan-line based and ray-based rendering algorithms. Lighting models for reflection, refraction, transparency.
COMPSCI 186	Introduction to Database Systems [4]	Access methods and file systems to facilitate data access. Hierarchical, network, relational, and object-oriented data models. Query languages for models. Embedding query languages in programming languages. Database services including protection, integrity control, and alternative views of data. High-level interfaces including application generators, browsers, and report writers. Introduction to transaction processing. Database system implementation to be done as term project.
or COMPSCI W186	Introduction to Database Systems	Broad introduction to systems for storing, querying, updating and managing large databases. Computer science skills synthesizing viewpoints from low-level systems architecture to high-level modeling and declarative logic. System internals, including the complex details of query optimization and execution, concurrency control, indexing, and memory management. More abstract issues in query languages and data modeling – students are exposed to formal relational languages, SQL, full-text search, entity-relationship modeling, normalization, and physical database design. Recent technological trends in the field, including “Big Data” programming libraries like MapReduce, and distributed key-value stores with various consistency models.
EECS C106A	Introduction to Robotics [4]	An introduction to the kinematics, dynamics, and control of robot manipulators, robotic vision, and sensing. The course covers forward and inverse kinematics of serial chain manipulators, the manipulator Jacobian, force relations, dynamics, and control. It presents elementary principles on proximity, tactile, and force sensing, vision sensors, camera calibration, stereo construction, and motion detection. The course concludes with current applications of robotics in active perception, medical robotics, and other areas.
EECS C106B	Robotic Manipulation and Interaction [4]	This course is a sequel to EECS C106A/Bioengineering C106A, which covers kinematics, dynamics and control of a single robot. This course will cover dynamics and control of groups of robotic manipulators coordinating with each other and interacting with the environment. Concepts will include an introduction to grasping and the constrained manipulation, contacts and force control for interaction with the environment. We will also cover active perception guided manipulation, as well as the manipulation of non-rigid objects. Throughout, we will emphasize design and human-robot interactions, and applications to applications in manufacturing, service robotics, tele-surgery, and locomotion.
EECS 149	Introduction to Embedded Systems [4]	This course introduces students to the basics of modeling, analysis, and design of embedded, cyber-physical systems. Students learn how to integrate computation with physical processes to meet a desired specification. Topics include models of computation, control, analysis and verification, interfacing with the physical world, real-time behaviors, mapping to platforms, and distributed embedded systems. The course has a strong laboratory component, with emphasis on a semester-long sequence of projects.
"EECS 151
& 151LA"	"Introduction to Digital Design and Integrated Circuits
and Application Specific Integrated Circuits Laboratory"	An introduction to digital and system design. The material provides a top-down view of the principles, components, and methodologies for large scale digital system design. The underlying CMOS devices and manufacturing technologies are introduced, but quickly abstracted to higher-levels to focus the class on design of larger digital modules for both FPGAs (field programmable gate arrays) and ASICs (application specific integrated circuits). The class includes extensive use of industrial grade design automation and verification tools for assignments, labs and projects.
"or EECS 151
& 151LB"	"Introduction to Digital Design and Integrated Circuits
and Field-Programmable Gate Array Laboratory"	This lab lays the foundation of modern digital design by first presenting the scripting and hardware description language base for specification of digital systems and interactions with tool flows. The labs are centered on a large design with the focus on rapid design space exploration. The lab exercises culminate with a project design, e.g., implementation of a three-stage RISC-V processor with a register file and caches. The design is mapped to simulation and layout specification.
Technical Elective: 4 units2		
Ethics Requirement		
Code	Title	
Select one course from the following:		
BIO ENG 100	Ethics in Science and Engineering 5	The goal of this semester course is to present the issues of professional conduct in the practice of engineering, research, publication, public and private disclosures, and in managing professional and financial conflicts. The method is through historical didactic presentations, case studies, presentations of methods for problem solving in ethical matters, and classroom debates on contemporary ethical issues. The faculty will be drawn from national experts and faculty from religious studies, journalism, and law from the UC Berkeley campus.
COMPSCI 195	Social Implications of Computer Technology	Topics include electronic community; the changing nature of work; technological risks; the information economy; intellectual property; privacy; artificial intelligence and the sense of self; pornography and censorship; professional ethics. Students will lead discussions on additional topics.
COMPSCI H195	Honors Social Implications of Computer Technology	Topics include electronic community; the changing nature of work; technological risks; the information economy; intellectual property; privacy; artificial intelligence and the sense of self; pornography and censorship; professional ethics. Students may lead discussions on additional topics.
DATA C104	Human Contexts and Ethics of Data - DATA/History/STS 5	This course teaches you to use the tools of applied historical thinking and Science, Technology, and Society (STS) to recognize, analyze, and shape the human contexts and ethics of data. It addresses key topics such as doing ethical data science amid shifting definitions of human subjects, consent, and privacy; the changing relationship between data, democracy, and law; the role of data analytics in how corporations and governments provide public goods such as health and security to citizens; sensors, machine learning and artificial intelligence and changing landscapes of labor, industry, and city life. It prepares you to engage as a knowledgeable and responsible citizen and professional in the varied arenas of our datafied world.
ENE,RES C100	Energy and Society 5	Energy sources, uses, and impacts: an introduction to the technology, politics, economics, and environmental effects of energy in contemporary society. Energy and well-being; energy in international perspective, origins, and character of energy crisis.
ENGIN 125	Ethics, Engineering, and Society 5	How should engineers analyze and resolve the ethical issues inherent in engineering? This seminar-style course provides an introduction to how theories, concepts, and methods from the humanities and social science can be applied to ethical problems in engineering. Assignments incorporate group and independent research designed to provide students an opportunity to contribute novel findings to the emerging field of engineering ethics while building their analytical and communication skills. This course cannot be used to fulfill any engineering technical requirements (units or courses).
ENGIN 157AC	Engineering, The Environment, and Society 5	This course engages students at the intersection of environmental justice, social justice, and engineering to explore how problems that are commonly defined in technical terms are at their roots deeply socially embedded. Through partnerships with community-based organizations, students are trained to recognize the socio-political nature of technical problems so that they may approach solutions in ways that prioritize social justice. Topics covered include environmental engineering as it relates to air, water, and soil contamination; race, class, and privilege; expertise; ethics; and engaged citizenship. This course cannot be used to complete any engineering technical unit requirements.
ENGIN 185	The Art of STEM Communication 5	This course provides engineering majors with the fundamental skills for effective technical communication. During the course of the semester, students will develop communications for public dissemination, covering a project or initiative within UC Berkeley’s College of Engineering. This work will call on students to: (a) cultivate interest in a broad range of topics related to Engineering; (b) become an engaged and critical reader of academic and general-interest science publications; (c) learn how to assess, plan for, and respond to a variety of communicative situations; (d) produce focused, and at the same time, narratively-rich, accounts of Engineering research.
HISTORY C184D	Human Contexts and Ethics of Data - DATA/History/STS 5	This course teaches you to use the tools of applied historical thinking and Science, Technology, and Society (STS) to recognize, analyze, and shape the human contexts and ethics of data. It addresses key topics such as doing ethical data science amid shifting definitions of human subjects, consent, and privacy; the changing relationship between data, democracy, and law; the role of data analytics in how corporations and governments provide public goods such as health and security to citizens; sensors, machine learning and artificial intelligence and changing landscapes of labor, industry, and city life. It prepares you to engage as a knowledgeable and responsible citizen and professional in the varied arenas of our datafied world.
IAS 157AC	Engineering, The Environment, and Society 5	This course engages students at the intersection of environmental justice, social justice, and engineering to explore how problems that are commonly defined in technical terms are at their roots deeply socially embedded. Through partnerships with community-based organizations, students are trained to recognize the socio-political nature of technical problems so that they may approach solutions in ways that prioritize social justice. Topics covered include environmental engineering as it relates to air, water, and soil contamination; race, class, and privilege; expertise; ethics; and engaged citizenship. This course cannot be used to complete any engineering technical unit requirements.
INFO 88A	Data and Ethics	This course provides an introduction to critical and ethical issues surrounding data and society. It blends social and historical perspectives on data with ethics, policy, and case examples to help students develop a workable understanding of current ethical issues in data science. Ethical and policy-related concepts addressed include: research ethics; privacy and surveillance; data and discrimination; and the “black box” of algorithms. Importantly, these issues will be addressed throughout the lifecycle of data--from collection to storage to analysis and application. Course assignments will emphasize researcher and practitioner reflexivity, allowing students to explore their own social and ethical commitments.
ISF 100D	Introduction to Technology, Society, and Culture 5	This course surveys the technological revolutions of the 19th and 20th centuries, it then focuses on the development of the computer and the Internet. The final part examines the impact of the Internet on social movements.
ISF 100G	Introduction to Science, Society, and Ethics 5	This interdisciplinary course will explore whether it has proven possible and desirable to understand society through value-free and positivistic scientific methods as predominantly developed in the transatlantic worlds of the 19th centuries. We shall explore questions that may be applied to the realms of public health and human biology, or to the social sciences generally, including anthropology, sociology, economics, and political science.
NWMEDIA 151AC	Transforming Tech: Issues and Interventions in STEM and Silicon Valley 5	In this course, we will study major tech industry controversies and heavily criticized tech products, policies, and effects, including technologies used at the U.S.-Mexico border, social media platforms’ spread of disinformation and fake news, racial bias in algorithms, and internet trolling and harassment. We will also examine tech companies’ long-running tendency to exclude women and non-Asian minorities, and how tech workers have occasionally come under fire for the industry’s harms. Students will be required to brainstorm and design their own interventions into the workings of the tech sector to make it more inclusive, equitable, and diverse.
PUB POL C184	Energy and Society 5	Energy sources, uses, and impacts: an introduction to the technology, politics, economics, and environmental effects of energy in contemporary society. Energy and well-being; energy in international perspective, origins, and character of energy crisis.
STS C104D	Human Contexts and Ethics of Data - DATA/History/STS 5	This course teaches you to use the tools of applied historical thinking and Science, Technology, and Society (STS) to recognize, analyze, and shape the human contexts and ethics of data. It addresses key topics such as doing ethical data science amid shifting definitions of human subjects, consent, and privacy; the changing relationship between data, democracy, and law; the role of data analytics in how corporations and governments provide public goods such as health and security to citizens; sensors, machine learning and artificial intelligence and changing landscapes of labor, industry, and city life. It prepares you to engage as a knowledgeable and responsible citizen and professional in the varied arenas of our datafied world.