EE 108	Digital System Design	Digital circuit, logic, and system design. Digital representation of information. CMOS logic circuits. Combinational logic design. Logic building blocks, idioms, and structured design. Sequential logic design and timing analysis. Clocks and synchronization. Finite state machines. Microcode control. Digital system design. Control and datapath partitioning. Lab. *In Autumn, enrollment preference is given to EE majors. Any EE majors who must enroll in Autumn are invited to contact the instructor. Formerly EE 108A.
EE 180	Digital Systems Architecture	The design of processor-based digital systems. Instruction sets, addressing modes, data types. Assembly language programming, low-level data structures, introduction to operating systems and compilers. Processor microarchitecture, microprogramming, pipelining. Memory systems and caches. Input/output, interrupts, buses and DMA. System design implementation alternatives, software/hardware tradeoffs. Labs involve the design of processor subsystems and processor-based embedded systems. Formerly EE 108B. Prerequisite: CS107 (required) and EE108 (recommended but not required).
Select two of the following:		
EE 101A	Circuits I	Introduction to circuit modeling and analysis. Topics include creating the models of typical components in electronic circuits and simplifying non-linear models for restricted ranges of operation (small signal model); and using network theory to solve linear and non-linear circuits under static and dynamic operations. Prerequisite: ENGR40 or ENGR40M is strongly recommended.
EE 101B	Circuits II	Continuation of EE101A. Introduction to circuit design for modern electronic systems. Modeling and analysis of analog gain stages, frequency response, feedback. Filtering and analog to digital conversion. Fundamentals of circuit simulation. Prerequisites: EE101A, EE102A. Recommended: CME102.
EE 102A	Signal Processing and Linear Systems I	Concepts and tools for continuous- and discrete-time signal and system analysis with applications in signal processing, communications, and control. Mathematical representation of signals and systems. Linearity and time invariance. System impulse and step responses. System frequency response. Frequency-domain representations: Fourier series and Fourier transforms. Filtering and signal distortion. Time/frequency sampling and interpolation. Continuous-discrete-time signal conversion and quantization. Discrete-time signal processing. Prerequisite: MATH 53 or CME 102.
EE 102B	Signal Processing and Linear Systems II	Continuation of EE 102A. Concepts and tools for continuous- and discrete-time signal and system analysis with applications in communications, signal processing and control. Analog and digital modulation and demodulation. Sampling, reconstruction, decimation and interpolation. Finite impulse response filter design. Discrete Fourier transforms, applications in convolution and spectral analysis. Laplace transforms, applications in circuits and feedback control. Z transforms, applications in infinite impulse response filter design. Prerequisite: EE 102A.
Satisfy the requirements of one of the following concentrations:		
1) Digital Systems Concentration		
CS 140	Operating Systems and Systems Programming 4	Operating systems design and implementation. Basic structure; synchronization and communication mechanisms; implementation of processes, process management, scheduling, and protection; memory organization and management, including virtual memory; I/O device management, secondary storage, and file systems. Prerequisite: CS110.
or CS 140E	Operating systems design and implementation	Students will implement a simple, clean operating system (virtual memory, processes, file system) in the C programming language, on a rasberry pi computer and use the result to run a variety of devices and implement a final project. All hardware is supplied by the instructor, and no previous experience with operating systems, raspberry pi, or embedded programming is required.
or CS 143	Compilers	Principles and practices for design and implementation of compilers and interpreters. Topics: lexical analysis; parsing theory; symbol tables; type systems; scope; semantic analysis; intermediate representations; runtime environments; code generation; and basic program analysis and optimization. Students construct a compiler for a simple object-oriented language during course programming projects. Prerequisites: 103 or 103B, and 107.
EE 109	Digital Systems Design Lab	The design of integrated digital systems encompassing both customized software and hardware. Software/hardware design tradeoffs. Algorithm design for pipelining and parallelism. System latency and throughput tradeoffs. FPGA optimization techniques. Integration with external systems and smart devices. Firmware configuration and embedded system considerations. Enrollment limited to 25; preference to graduating seniors. Prerequisites: 108B, and CS 106B or X.
EE 271	Introduction to VLSI Systems	Provides a quick introduction to MOS transistors and IC fabrication and then creates abstractions to allow you to create and reason about complex digital systems. It uses a switch resistor model of a transistor, uses it to model gates, and then shows how gates and physical layout can be synthesized from Verilog or SystemVerilog descriptions. Most of the class will be spent on providing techniques to create designs that can be validated, are low power, provide good performance, and can be completed in finite time. Prerequisites: 101A, 108A and 108B; familiarity with transistors, logic design, Verilog and digital system organization.
Plus two of the following (6-8 units):		
CS 140	Operating Systems and Systems Programming (if not counted above) 4	Operating systems design and implementation. Basic structure; synchronization and communication mechanisms; implementation of processes, process management, scheduling, and protection; memory organization and management, including virtual memory; I/O device management, secondary storage, and file systems. Prerequisite: CS110.
or CS 140E	Operating systems design and implementation	Students will implement a simple, clean operating system (virtual memory, processes, file system) in the C programming language, on a rasberry pi computer and use the result to run a variety of devices and implement a final project. All hardware is supplied by the instructor, and no previous experience with operating systems, raspberry pi, or embedded programming is required.
or CS 143	Compilers	Principles and practices for design and implementation of compilers and interpreters. Topics: lexical analysis; parsing theory; symbol tables; type systems; scope; semantic analysis; intermediate representations; runtime environments; code generation; and basic program analysis and optimization. Students construct a compiler for a simple object-oriented language during course programming projects. Prerequisites: 103 or 103B, and 107.
CS 144	Introduction to Computer Networking	Principles and practice. Structure and components of computer networks, with focus on the Internet. Packet switching, layering, and routing. Transport and TCP: reliable delivery over an unreliable network, flow control, congestion control. Network names, addresses and ethernet switching. Includes significant programming component in C/C++; students build portions of the internet TCP/IP software. Prerequisite: CS110.
CS 149	Parallel Computing	This course is an introduction to parallelism and parallel programming. Most new computer architectures are parallel; programming these machines requires knowledge of the basic issues of and techniques for writing parallel software. Topics: varieties of parallelism in current hardware (e.g., fast networks, multicore, accelerators such as GPUs, vector instruction sets), importance of locality, implicit vs. explicit parallelism, shared vs. non-shared memory, synchronization mechanisms (locking, atomicity, transactions, barriers), and parallel programming models (threads, data parallel/streaming, MapReduce, Apache Spark, SPMD, message passing, SIMT, transactions, and nested parallelism). Significant parallel programming assignments will be given as homework. The course is open to students who have completed the introductory CS course sequence through 110.
CS 190	Software Design Studio	This course teaches the art of software design: how to decompose large complex systems into classes that can be implemented and maintained easily. Topics include the causes of complexity, modular design, techniques for creating deep classes, minimizing the complexity associated with exceptions, in-code documentation, and name selection. The class involves significant system software implementation and uses an iterative approach consisting of implementation, review, and revision. The course is taught in a studio format with in-class discussions and code reviews in addition to lectures. Prerequisite: CS 140 or equivalent. Apply at: https://web.stanford.edu/class/cs190.
CS 217	Hardware Accelerators for Machine Learning	This course provides in-depth coverage of the architectural techniques used to design accelerators for training and inference in machine learning systems. This course will cover classical ML algorithms such as linear regression and support vector machines as well as DNN models such as convolutional neural nets, and recurrent neural nets. We will consider both training and inference for these models and discuss the impact of parameters such as batch size, precision, sparsity and compression on the accuracy of these models. We will cover the design of accelerators for ML model inference and training. Students will become familiar with hardware implementation techniques for using parallelism, locality, and low precision to implement the core computational kernels used in ML. To design energy-efficient accelerators, students will develop the intuition to make trade-offs between ML model parameters and hardware implementation techniques. Students will read recent research papers and complete a design project. Prerequisites: CS 149 or EE 180. CS 229 is ideal, but not required.
CS 244	Advanced Topics in Networking	Classic papers, new ideas, and research papers in networking. Architectural principles: why the Internet was designed this way? Congestion control. Wireless and mobility; software-defined networks (SDN) and network virtualization; content distribution networks; packet switching; data-center networks. Prerequisite: 144 or equivalent.
EE 273	Digital Systems Engineering	Electrical issues in the design of high-performance digital systems, including signaling, timing, synchronization, noise, and power distribution. High-speed signaling methods; noise in digital systems, its effect on signaling, and methods for noise reduction; timing conventions; timing noise (skew and jitter), its effect on systems, and methods for mitigating timing noise; synchronization issues and synchronizer design; clock and power distribution problems and techniques; impact of electrical issues on system architecture and design. Prerequisites: EE101A and EE108A. Recommended: EE114/214A.
EE 282	Computer Systems Architecture	Course focuses on how to build modern computing systems, namely notebooks, smartphones, and data centers, covering primarily their hardware architecture and certain system software aspects. For each system class, we cover the system architecture, processor technology, advanced memory hierarchy and I/O organization, power and energy management, and reliability. We will also cover topics such as interactions with system software, virtualization, solid state storage, and security. The programming assignments allow students to explore performance/energy tradeoffs when using heterogeneous hardware resources on smartphone devices. Prerequisite: EE108B. Recommended: CS 140.
2) Robotics and Mechatronics Concentration		
CS 205L	Continuous Mathematical Methods with an Emphasis on Machine Learning	A survey of numerical approaches to the continuous mathematics used throughout computer science with an emphasis on machine and deep learning. Although motivated from the standpoint of machine learning, the course will focus on the underlying mathematical methods including computational linear algebra and optimization, as well as special topics such as automatic differentiation via backward propagation, momentum methods from ordinary differential equations, CNNs, RNNs, etc. Written homework assignments focus on various concepts; additionally, students choose either a take-home final exam or a series of programming assignments geared towards neural network creation, training, and inference. (Replaces CS205A, and satisfies all similar requirements.) Prerequisites: Math 51; Math104 or MATH113 or equivalent or comfort with the associated material.
CS 223A	Introduction to Robotics	Robotics foundations in modeling, design, planning, and control. Class covers relevant results from geometry, kinematics, statics, dynamics, motion planning, and control, providing the basic methodologies and tools in robotics research and applications. Concepts and models are illustrated through physical robot platforms, interactive robot simulations, and video segments relevant to historical research developments or to emerging application areas in the field. Recommended: matrix algebra.
ME 210	Introduction to Mechatronics	Technologies involved in mechatronics (intelligent electro-mechanical systems), and techniques to apply this technology to mecatronic system design. Topics include: electronics (A/D, D/A converters, op-amps, filters, power devices); software program design, event-driven programming; hardware and DC stepper motors, solenoids, and robust sensing. Large, open-ended team project. Prerequisites: ENGR 40, CS 106, or equivalents.
ENGR 105	Feedback Control Design	Design of linear feedback control systems for command-following error, stability, and dynamic response specifications. Root-locus and frequency response design techniques. Examples from a variety of fields. Some use of computer aided design with MATLAB. Prerequisites: Dynamics systems (EE 102B or ME 161), and ordinary differential equations (CME 102 or Math 53). This course will include synchronous teaching sessions, but will be recorded to allow asynchronous participation.
Plus one of the following (3-4 units):		
CS 225A	Experimental Robotics	Hands-on laboratory course experience in robotic manipulation. Topics include robot kinematics, dynamics, control, compliance, sensor-based collision avoidance, and human-robot interfaces. Second half of class is devoted to final projects using various robotic platforms to build and demonstrate new robot task capabilities. Previous projects include the development of autonomous robot behaviors of drawing, painting, playing air hocket, yoyo, basketball, ping-pong or xylophone. Prerequisites: 223A or equivalent.
CS 231A	Computer Vision: From 3D Reconstruction to Recognition	(Formerly 223B) An introduction to the concepts and applications in computer vision. Topics include: cameras and projection models, low-level image processing methods such as filtering and edge detection; mid-level vision topics such as segmentation and clustering; shape reconstruction from stereo, as well as high-level vision tasks such as object recognition, scene recognition, face detection and human motion categorization. Prerequisites: linear algebra, basic probability and statistics.
ENGR 205	Introduction to Control Design Techniques	Review of root-locus and frequency response techniques for control system analysis and synthesis. State-space techniques for modeling, full-state feedback regulator design, pole placement, and observer design. Combined observer and regulator design. Lab experiments on computers connected to mechanical systems. Prerequisites: 105, MATH 103, 113. Recommended: Matlab.
ENGR 207B	Linear Control Systems II	Probabilistic methods for control and estimation. Statistical inference for discrete and continuous random variables. Linear estimation with Gaussian noise. The Kalman filter. Prerequisite: EE 263.
3) Networking Concentration		
CS 140	Operating Systems and Systems Programming (CS 140E can substitute for CS 140) 4	Operating systems design and implementation. Basic structure; synchronization and communication mechanisms; implementation of processes, process management, scheduling, and protection; memory organization and management, including virtual memory; I/O device management, secondary storage, and file systems. Prerequisite: CS110.
CS 144	Introduction to Computer Networking	Principles and practice. Structure and components of computer networks, with focus on the Internet. Packet switching, layering, and routing. Transport and TCP: reliable delivery over an unreliable network, flow control, congestion control. Network names, addresses and ethernet switching. Includes significant programming component in C/C++; students build portions of the internet TCP/IP software. Prerequisite: CS110.
Plus three of the following (9-11 units):		
CS 240	Advanced Topics in Operating Systems	Recent research. Classic and new papers. Topics: virtual memory management, synchronization and communication, file systems, protection and security, operating system extension techniques, fault tolerance, and the history and experience of systems programming. Prerequisite: 140 or equivalent.
or CS 240LX	Advanced Systems Laboratory, Accelerated	This is an implementation-heavy, lab-based class that covers similar topics as CS240, but by writing code versus discussing papers. Our code will run "bare-metal" (without an operating system) on the widely-used ARM-based raspberry pi. Bare-metal lets us do interesting tricks without constantly fighting a lumbering, general-purpose OS that cannot get out of its own way. We will do ten projects, one per week, where each project covers two labs of (at a minimum) several hours each and a non-trivial amount of outside work. The workload is significant, but I will aim to not waste your time. Prerequisite: CS140E or instructor permission.
CS 241	Embedded Systems Workshop	Project-centric building hardware and software for embedded computing systems. Students work on an existing project of their own or join one of these projects. Syllabus topics will be determined by the needs of the enrolled students and projects. Examples of topics include: interrupts and concurrent programming, deterministic timing and synchronization, state-based programming models, filters, frequency response, and high-frequency signals, low power operation, system and PCB design, security, and networked communication. Prerequisite: CS107 (or equivalent).
CS 244	Advanced Topics in Networking	Classic papers, new ideas, and research papers in networking. Architectural principles: why the Internet was designed this way? Congestion control. Wireless and mobility; software-defined networks (SDN) and network virtualization; content distribution networks; packet switching; data-center networks. Prerequisite: 144 or equivalent.
CS 244B	Distributed Systems	Distributed operating systems and applications issues, emphasizing high-level protocols and distributed state sharing as the key technologies. Topics: distributed shared memory, object-oriented distributed system design, distributed directory services, atomic transactions and time synchronization, application-sufficient consistency, file access, process scheduling, process migration, and storage/communication abstractions on distribution, scale, robustness in the face of failure, and security. Prerequisites: CS 144.
EE 179	Analog and Digital Communication Systems	This course covers the fundamental principles underlying the analysis, design and optimization of analog and digital communication systems. Design examples will be taken from the most prevalent communication systems today: cell phones, Wifi, radio and TV broadcasting, satellites, and computer networks. Analysis techniques based on Fourier transforms and energy/power spectral density will be developed. Mathematical models for random variables and random (noise) signals will be presented, which are used to characterize filtering and modulation of random noise. These techniques will then be used to design analog (AM and FM) and digital (PSK and FSK) communication systems and determine their performance over channels with noise and interference. Prerequisite: 102A.